UML 관계
	- 일반화(Generalization) : 상속관계, 가전제품-TV, 세탁기, 식기세척기
	- 실체화(Realization) : 오버라이딩, 리모콘틀-TV리모콘, 에어컨리모콘
	- 연관(Association) : 사람-휴대폰
	- 의존(Dependency) : 학생-색연필 (미술시간에만 의존)
	- 집합(Aggregation) : 불고기-간장, 다시다, 미원
	- 합성(Composition) : 책상-다리, 상판, 나사

구조 다이어그램
	- 클래스다이어그램(Class) : 클래스의 속성과 클래스 사이의 관계 표현
	- 객체다이어그램(Object) : 객체를 객체와 객체 사이의 관계로 표현
	- 컴포넌트다이어그램(Component) : 컴포넌트 사이 관계나 인터페이스 표현
	- 배치다이어그램(Deployment) : 물리적 요소들의 위치를 표현
	- 복합체다이어그램(Composite Structure) : 클래스나 컴포넌트가 복합구조를 사질 시 그 내부 구조를 표현
	- 패키지다이어그램(Package) : 모델 요소들을 그룹화한 패키지들의 관계 표현

행위 다이어그램
	- 유스케이스다이어그램(Usecase) : 사용자의 요구를 분석하여 기능 모델링에 사용
	- 시퀀스다이어그램(Sequence) : 어떤 순서로 어떤 객체와 상호작용하는지 표현
	- 커뮤니케이션다이어그램(Communication) : 객체들이 주고받는 메시지와 객체 간 연관까지 표현
	- 상태다이어그램(State) : 객체의 상태 변화 및 다른 객체 간 상호작용에 따라 상태 변화 표현
	- 활동다이어그램(Activity) : 객체 처리 로직이나 조건에 따른 처리 흐름을 순서에 따라 표현
	- 상호작용다이어그램(Interaction Overview) : 상호작용 다이어그램 간 제어 흐름 표현
	- 타이밍다이어그램(Timing) : 상태 변화와 시간 제약을 명시적으로 표현

생성 패턴
	- Abstract Factory : 구체적인 클래스에 의존하지 않고, 서로 연관되거나 의존적인 객체들의 조합을 만듬
	- Builder : 동일한 생성 절차에서도 다른 표현 결과를 만들어낼 수 있음
	- Factory Method : 객체 생성을 서브클래스로 위임하여 캡슐화 -> 업캐스팅
	- Prototype : 원본 객체를 복사하여 객체를 생성
	- Singleton : 인스턴스는 오직 하나임을 보장함

구조 패턴
	- Adaptor : 다른 인터페이스로 변환하여 다른 클래스가 이용할 수 있도록 함
	- Bridge : 구현부에서 추상층을 분리하여 독립적으로 확장 (도형 인터페이스를 구현하는 원클래스와 사각형클래스)
	- Composite : 트리구조로 구성하여 객체를 구분없이 다룸 -> 마인드맵
	- Decorator : 어떤 객체에 다른 객체를 덧붙이는 방식
	- Facade : 서브시스템의 가장 앞쪽에 위치하여 서브시스템에 있는 객체를 사용할 수 있도록 함
	- Flyweight : 객체를 가능한 한 공유하여 메모리를 절약함
	- Proxy : 접근이 어려운 객체로 접근을 제어하기 위해 대리나 대체글 제공

행위 패턴
	- Responsibility Chain : 객체를 연쇄적으로 묶어 처리될 때 까지 체인을 따라 요청 전달
	- Command : 요청을 객체의 형태로 캡슐화
	- Interpreter : 특정 언어의 문법 표현
	- Iterator : 객체의 원소를 순차적으로 접근
	- Mediator : 객체들의 상호작용을 캡슐화하여 새로운 객체 정의
	- Memento : 객체의 내부 상태를 실체화
	- Observer : 객체 상태가 변할 때 관련 객체들이 그 변화를 통지
	- State : 상태에 따라 동일한 동작을 다르게 처리 -> 한/영키
	- Strategy : 알고리즘 전략 정의
	- Template Method : 상위클래스는 골격만을 제공
	- Visitor : 객체의 원소에 대해 수행할 연산을 분리하여 별도의 클래스 구성 -> 개방-폐쇄 원칙 적용

















