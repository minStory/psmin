정보시스템 구축관리

소프트웨어 개발 방법론
: 소프트웨어 개발, 유지보수에 필요한 수행 방법과 효율적으로 수행하려는 과정에서
  필요한 기법 및 도구를 정리하여 표준화
	- 구조적 방법론, 정보공학 방법론, 객체지향 방법론, 컴포넌트 기반 방법론,
	  애자일 방법론, 제품 계열 방법론 등이 있음

구조적 방법론
: 정형화된 분석 절차에 따라 사용자 요구사항을 파악하여 문서화하는 처리 중심의 방법론
	- 복잡한 문제를 다루기 위해 분할과 정복(Divide and Conquer) 원리 적용
	- 순서
	  타당성 검토 -> 계획 -> 요구사항 분석 -> 설계 -> 구현 -> 시험 -> 운용/유지보수

정보공학 방법론
: 정보 시스템 개발을 위해 계획, 분석, 설계, 구축에 정형화된 기법들을 상호 연관성 있게
  통합 및 적용하는 자료 중심의 방법론
	- 대규모 정보시스템 구축에 적합
	- 순서
	  정보 전략 계획수립 -> 업무 영역 분석 -> 업무 시스템 설계 -> 업무 시스템 구축

객체지향 방법론
: 기계의 부품을 조립하듯이 객체들을 조립하여 소프트웨어를 구현하는 방법론
	- 구조적 기법의 해결책으로 채택
	- 기본 원칙으로는 캡슐화, 정보은닉, 추상화, 상속성, 다형성 등이 있다
	- 순서
	  요구사항 분석 -> 설계 -> 구현 -> 테스트 및 검증 -> 인도

컴포넌트 기반(CBD ::Component Based Design) 방법론
: 기존의 시스템이나 컴포넌트를 조합하여 새로운 애플리케이션을 만드는 방법론
	- 컴포넌트의 재사용이 가능하여 시간, 노력, 비용을 절감하고 품질을 높임
	- 새로운 기능 추가가 용이하여 확장성이 보장됨
	- 순서
	  개발 준비 -> 분석 -> 설계 -> 구현 -> 테스트 -> 전개 -> 인도

애자일 방법론
: 고객의 요구사항 변화에 빠르고 유연하게 대응하도록 일정한 주기를 반복하면서
  개발 과정을 진행하는 방법론
	- 소규모 프로젝트, 고도로 숙달된 개발자, 급변하는 요구사항에 적합
	- 순서
	  개발 준비 -> 분석 -> 설계 -> 구현 -> 테스트 -> 전개 -> 인도

제품 계열 방법론
: 특정 제품에 적용하고 싶을 공통된 기능을 정의하여 개발하는 방법론
	- 임베디드 소프트웨어 개발에 적합
	*임베디드 소프트웨어
	: 전기밥솥, 냉장고, TV등 특정 제품에 맞게 특화되어 제품 자체에 포함된 소프트웨어
	  (임베디드 시스템이라고도 부름)


S/W 공학의 발전적 추세

소프트웨어 재사용
: 이미 개발되어 사용 중인 소프트웨어의 일부 혹은 전체를 다른 소프트웨어 개발이나 유지에 사용하는 것
	- 개발 시간과 비용 단축
	- 품질 향상 및 생산성 향상
	- 프로젝트 실패 위험 감소
	- 시스템 구축 방법에 대한 지식 공유 및 문서화

소프트웨어 재사용 방법
ㄱ. 합성 중심(Composition-Based) (:: 블록 구성 방법)
: 전자 칩과 같은 소프트웨어 부품, 즉 모듈을 만들어서 끼워 맞추어 소프트웨어를 완성시키는 방법
ㄴ. 생성 중심(Generation-Based) (::패턴 구성 방법)
: 추상화 형태로 쓰여진 명세를 구체화하여 프로그램을 만드는 방법

소프트웨어 재공학(Software Reengineering)
: 새로운 요구에 맞도록 기존 시스템을 이용하여 보다 나은 시스템을 구축하고,
  새로운 기능을 추가하여 소프트웨어 성능을 향상시키는 것
	- 요지보수와 생산성 향상을 통해 소프트웨어 위기 해결
	- 기존 소프트웨어 기능을 개조하거나 개선하므로
	  예방 유지보수 측면에서 위기를 해결하는 방법
	- 오류 발생률이 줄어들고 비용이 절감됨

CASE(Computer Aided Software Engineering)
: 소프트웨어 개발 과정에서 사용되는 요구 분석, 설계, 구현, 검사 및 디버깅 과정 전체 또는 일부를
  컴퓨터와 전용 소프트웨어 도구를 사용하여 자동화하는 것
	- 객체지향 시스템, 구조적 시스템 등 다양한 시스템에서 활용되는 자동화 도구
	- 소프트웨어, 하드웨어, 데이터베이스, 테스트 등을 통합하여 소프트웨어 개발 환경 조성
	- 표준화된 개발 환경 구축 및 문서 자동화 기능 제공
	- 소프트웨어 생명 주기의 전체 단계를 연결해 주고 자동화해 주는 통합된 도구를 제공해 주는 기술
	- 작업 과정 및 데이터 공유를 통해 작업자 간 커뮤니케이션 증대
	- CASE도구가 모듈 관리를 자동으로 수행하므로 유지보수가 간편해짐
	- CASE의 주요 기능으로는 소프트웨어 생명 주기 전 단계의 연결, 다양한 소프트웨어 개발 모형 지원,
	  그래픽 지원, 모델들의 모순 검사 및 오류 검증, 자료흐름도 작성 등이 있음


비용 산정 기법

소프트웨어 비용 산정
: 소프트웨어의 개발 규모를 소요되는 인원, 자원, 기간 등으로 확인하여
  실행 가능한 계획을 수립하기 위해 필요한 비용을 산정하는 것

하향식 산정 기법
: 과거의 유사한 경험을 바탕으로 전문 지식이 많은 개발자들이 참여한 회의를 통해 비용을 산정
	ㄱ. 전문가 감정 기법
		- 조직 내 경험이 많은 두 명 이상의 전문가에게 비용 산정을 의뢰
		- 진행했던 유사한 프로젝트와 진행할 새로운 프로젝트 간 새로운 요소가
		  있을 수 있고 경험이 없을 수 있음
	ㄴ. 델파이 기법
		- 많은 전문가의 여러 의견을 종합하여 산정
		- 한 명의 조정자와 여러 전문가로 구성되어 객관적임

상향식 산정 기법
: 프로젝트의 세부적인 작업 단위별로 비용을 산정 후 집계하여 전체 비용을 산정
	ㄱ. LOC(source Line Of Code) 기법 (:: 원시 코드 라인 수)
	: 소프트웨어의 각 기능의 원시 코드 라인 수로 예측치를 구하고 비용을 산정하는 방법
		- 측정이 용이하고 이해하기 쉬워 가장 많이 사용되며 예측치를 이용하여
		  노력, 개발 기간, 생산성 등의 비용을 산정
		- 노력(인월) = 개발 기간 x 투입 인원 = LOC / 1인당 월평균 생산 코드 라인 수
		- 개발 비용 = 노력(인월) x 단위 비용(1인당 월평균 인건비)
		- 개발 기간 = 노력(인월) / 투입 인원
		- 생산성 = LOC / 노력(인월)
		[설명] 사실 실전에서는 공식을 외우고 있지 않아도 끼워 맞추기로 풀어도 충분히 풀리는
		문제, 만약 실전에서 공식들이 기억나지 않는다면 위의 식과 비슷한 형태로 끼워 맞춰보고
		정답과 일치하는 선지가 있다면 대부분 그게 정답입니다.
	ㄴ. 개발 단계별 인원수 기법(Effort Per Task)
	: 각 기능을 구현시키는 데 필요한 노력을 생명 주기의 각 단계별로 산정
		- LOC기법보다 정확함


수학적 산정 기법
: 상향식 산정 기법에 속하는 산정 기법으로 경험적 추정 모형, 실험적 추정 모형 이라고도 하며,
  개발 비용 산정의 자동화를 목표로 함
	- 과거 유사한 프로젝트를 기반으로 경험적으로 공식을 유도
	- 수학적 산정 기반에는 COCOMO 모형, Putnam 모형, 기능점수(FP) 모형 등이 있으며
	  각 모형에서는 지정된 공식을 사용하여 비용을 산정

COCOMO 모형(Constructive Cost Model)
: 보헴이 제안하였으며 LOC에 의한 비용 산정 기법
	- 개발할 소프트웨어의 규모를 예측한 후 이를 소프트웨어 종류에 따라 다르게 책정되는
	  비용 산정 방정식에 대입하여 비용을 산정
		ㄱ. 조직형(Organic Mode)
		: 기관 내부에서 개발된 중.소규모의 소프트웨어로 5만 라인 이하의 소프트웨어를
		  개발하는 유형
			- 사무 처리용, 업무용, 과학용 응용 소프트웨어 개발에 적합
		ㄴ. 반분리형(Semi-Detached Mode)
		: 트랜잭션 처리 시스템이나 운영체제, 데이터베이스 관리 시스템 등
		  30만 라인 이하의 소프트웨어를 개발하는 유형
			- 컴파일러, 인터프리터와 같은  유틸리티 개발에 적합
			*컴파일러
			: 인간의 언어에 가까운 고급 언어로 작성된 원시 프로그램을 입력으로 받아
			  기계어로 된 목적 프로그램을 출력하기 위해 사용되는 언어 번역 프로그램
			*인터프리터
			: 원시 언어의 명령을 번역 실행하는 프로그램
		[설명] 컴퓨터 공학에서의 원시 언어는 수준이 낮은 우끼끼 하는 원시 언어가 아니라
		컴퓨터가 알아 들을 수 있는 언어들을 원시 언어라고 합니다. 반대로 고급 언어도
		고급스러운 언어를 말하는 것이 아니라 사람이 알아들을 수 있는 언어를 고급 언어라고
		합니다.
		ㄷ. 내장형(Embedded Mode)
		: 최대형 규모의 트랜잭션 처리 시스템이나 운영체제 등 30만 라인 이상의
		  소프트웨어를 개발하는 유형
			- 신호기 제어 시스템, 미사일 유도 시스템, 실시간 처리 시스템 등의
			  시스템 프로그램 개발에 적합

COCOMO 모형의 종류
: 비용 산정 단계 및 적용 변수의 구체화 정도에 따라 구분
	ㄱ. 기본형(Basic)
	: 소프트웨어의 크기와 개발 유형만을 이용하여 비용을 산정
	ㄴ. 중간형(Intermediate)
	: 기본형의 공식을 사용하거나 4가지 특성의 15가지 요인에 의해 비용을 산정
		a. 제품의 특성
		: 요구되는 신뢰도, 데이터베이스 크기, 제품의 복잡도
		b. 컴퓨터의 특성
		: 수행 시간의 제한, 기억 장소의 제한, 가상 기계의 안정성, 반환 시간
		c. 개발 요원의 특성
		: 분석가의 능력, 개발 분야의 경험, 가상 기계의 경험, 프로그래머의 능력,
		  프로그래밍 언어의 경험
		d. 프로젝트 특성
		: 소프트웨어 도구의 이용, 프로젝트 개발 일정, 최신 프로그래밍 기법의 이용
	ㄷ. 발전형(Detailed)
	: 개발 공정별로 보다 자세하고 정확하게 노력을 산출하여 비용을 산정

Putnam 모형
: 소프트웨어 생명 주기의 전 과정 동안에 사용될 노력의 분포를 가정해주는 모형
	- 생명 주기 예측 모형이라고도 함
	- 시간에 따라 함수로 표현되는 Rayleight-Norden 곡선의 노력 분포도를 기초로 함
	- 대형 프로젝트 노력 분포 산정에 이용

기능 점수 모형(Function Point)
: 소프트웨어 기능을 증대시키는 요인별로 가중치를 부여하고 합산하여 총 기능 점수를 산출하며
  총 기능 점수와 영향도를 이용하여 기능 점수를 구한 후 이를 이용해서 비용을 산정

자동화 추정 도구
ㄱ. SLIM
: Putnam 예측 모델을 기초로 하여 개발된 자동화 추정 도구
ㄴ. ESTIMACS
: 다양한 프로젝트와 개인별 요소를 수용하도록 FP 모형을 기초로 하여 개발된 자동화 추정 도구


프로젝트 일정 계획

PERT(Program Evaluation and Review Technique)
: 프로그램 평가 및 검토 기술로 프로젝트에 필요한 전체 작업의 상호 관계를 표시하는 네트워크로서
  각 단계별 종료 시기를 결정하는 방법
	- 과거에 경험이 없어서 소요 기간 예측이 어려운 소프트웨어에서 사용
	- 노드와 간선으로 구성되며 원 노드에는 작업을, 간선에는 낙관치, 기대치, 비관치 등을 표시한다

CMP(Critical Path Method)
: 임계 경로 기법 이라고도 하며 프로젝트 완성에 필요한 작업을 나열하고 작업에 필요한
  소요 기간을 예측하는 기법
	- 임계 경로는 최장 경로를 의미함
	- 각 작업의 순서와 의존 관계, 어느 작업이 동시에 수행될 수 있는지 한눈에 볼 수 있음

간트 차트
: 프로젝트의 각 작업들이 언제 시작하고 언제 종료되는지에 대한 작업 일정을 막대 도표를 이용하여
  표시하는 프로젝트 일정표로 시간선 차트라고도 함


소프트웨어 개발 표준
: 소프트웨어 개발 단계에서 수행하는 품질 관리에 사용되는 국제 표준
	- 대표적인 개발 표준에는 ISO/IEC 12207,CMMI, SPICE 등이 있음

ISO/IEC 12207
: ISO(International Organization for Standardization)에서 만든 표준 소프트웨어 생명 주기 프로세스로
  소프트웨어의 개발, 운영, 유지보수를 관리하기 위한 생명 주기 표준을 제공
	- 기본 / 생명 / 조직 생명 주기 프로세스로 구분

CMMI(Capabillity Maturity Model Integration) :: 능력 성숙도 통합 모델
: 소프트웨어 개발 조직의 업무 능력 및 조직의 성숙도를 평가
	- 성숙도는 초기, 관리, 정의, 정량적 관리, 최적화 5단계로 구분

	단계		프로세스			특징
	초기		정의된 프로세스 없음	작업자 능력에 따라 성공 여부 결정

	관리		규칙화된 프로세스		특정한 프로젝트 내의
						프로세스 정의 및 수행

	정의		표준화된 프로세스		조직의 표준 프로세스를
						활용하여 업무 수행

	정량적 관리	예측 가능한 프로세스	프로젝트를 정량적으로 관리 및 통제

	최적화		지속적 개선 프로세스	프로세스 역량 향상을 위해
						지속적인 프로세스 개선

SPICE(Software Process Improvement and Capability Determination, 소프트웨어 처리 개선 및 능력 평가 기준)
: 소프트웨어의 품질 및 생산성 향상을 위해 소프트웨어 프로세스를 평가 및 개선하는
  국제 표준으로 정식 명칭은 ISO/IEC 15504

SPICE 목적
	- 프로세스 개선을 위해 개발 기관이 스스로 평가
	- 기관에서 지정한 요구조건의 만족 여부를 개발 조직이 스스로 평가
	- 계약 체결을 위해 수탁 기관의 프로세스를 평가
	- 5개의 프로세스 범주와 40개의 세부 프로세스로 구성


소프트웨어 개발 방법론 테일러링
: 프로젝트 상황 및 특성에 맞도록 정의된 소프트웨어 개발 방법론의
  절차, 사용 기법 등을 수정 및 보완하는 작업

소프트웨어 개발 방법론 테일러링 고려사항
	- 내부적 요건 : 목표 환경, 요구사항, 프로젝트 규모, 보유 기술
	- 외부적 요건 : 법적 제약사항, 표준 품질 기준


소프트웨어 개발 프레임워크
: 소프트웨어 개발에 공통적으로 사용하는 구성 요소와 아키텍처를 일반화하여 손쉽게 구현할 수 있도록
  여러 가지 기능들을 제공해주는 반제품 형태의 소프트웨어 시스템
*반제품
: 완제품의 재료로 사용되기 위해 원료를 가공하여 만든 중간 제품을 의미

프레임워크의 특성
ㄱ. 모듈화(Modularity)
: 프레임워크는 캡슐화를 통해 모듈화를 강화하고 설계 및 구현의 변경에 따른 영향을
  최소화함으로써 소프트웨어 품질 향상
ㄴ. 재사용성(Reusability)
: 프레임워크는 재사용 가능한 모듈들을 제공함으로써 예산 절감 및 생산성 향상, 품질 보증 가능
ㄷ. 확장성(Extensibility)
: 프레임워크는 다형성을 통한 인터페이스 확장이 가능하여
  다양한 형태와 기능을 가진 애플리케이션 개발이 가능
*다형성
: 메시지에 의해 클래스가 연산을 수행하게 될 때, 하나의 메시지에 대해 각각의 객체가 가지고 있는
  고유한 방법으로 응답할 수 있는 능력 의미
ㄹ. 제어의 역흐름(Inversion of Control)
: 개발자가 관리하고 통제해야 하는 객체들의 제어를 프레임워크에 넘김으로써 생산성 향상

프레임워크의 종류
ㄱ. 스프링 프레임워크(Spring Framework)
: 자바 플랫폼과 동적인 웹 사이트의 개발을 위한 프레임워크
	- 전자정부 표준 프레임워크의 기반 기술임
ㄴ. 전자정부 프레임워크
: 우리나라의 공공부문 정보화 사업 시 효율적인 정보 시스템의 구축을 지원하기 위해
  필요한 기능 및 아키텍처를 제공
[설명] 당신이 SI업체를 가게 된다면, 그리고 거기서 국가 프로젝트를 맡게 된다면
한 번쯤은 경험하게 될 프레임 워크이다. 사실 사용해보면 알겠지만 스프링 프레임워크와
크게 차이나는 부분은 없다. 다만 오픈 소스 기반의 범용화가 되고 공개된 기술을 활용함으로써
특정 업체의 종속성을 배제한다는 정부의 크나큰 포부가 내재된 프레임 워크이다.
ㄷ. 닷넷 프레임워크(.NET Framwork)
: Windows 프로그램의 개발 및 실행 환경을 제공하는 프레임워크로
  Microsoft에서 통합 인터넷 전략을 위해 개발됨


네트워크 관련 신기술 용어

소프트웨어 정의 기술(SDE ::Software-Defined Everything)
: 네트워크, 데이터 센서 등에서 소유한 자원을 가상화하여 개별 사용자에게 제공.
  중앙에서는 통합적 제어가 가능한 기술
	ㄱ. SDN(Software Defined Networking)
	: 네트워크를 컴퓨터처럼 모델링하여 여러 사용자가 각각의 소프트웨어들로
	  네트워킹을 가상화하여 제어하고 관리하는 네트워크
	ㄴ. SDDC(Software Defined Data Center)
	: 데이터 센터의 모든 자원을 가상화하여 입력을 개입 없이 소프트웨어 조작만으로
	  관리 및 제어되는 데이터 센터
	ㄷ. SDS(Software Defined Storage)
	: 물리적인 데이터 스토리지를 가상화하여 여러 스토리지를 하나처럼 관리하거나,
	  하나의 스토리지를 여러 스토리지로 나눠 사용할 수 있는 기술
	*스토리지
	: 데이터를 일시적으로, 또는 영구적으로 저장할 수 있는 데이터 보존 장치

IoT(Internet of Things, 사물인터넷)
: 정보 통신 기술을 기반으로 실세계와 가상 세계의 다양한 사물과 사람을 인터넷으로 서로 연결하여
  진보된 서비스를 제공하기 위한 서비스 기반 기술
[설명] IoT 관려해서 가장 유명한 것은 스마트홈입니다. 집 밖에서도 원격 조작을 통해 집안의 환경을
조절하는 기술 많이 보셨죠? 그런 사물과 사물들이 연결되는 기술이 사물인터넷에 해당합니다.
	ㄱ. M2M(Machine to Machine, 사물 통신)
	: 무선 통신을 이용한 기계와 기계 사이의 통신
	ㄴ. 메시 네트워크(Mesh Network)
	: 차세대 이동통신, 홈네트워킹, 공공 안전 등 특수 목적을 위한 네트워크
	ㄷ. 와이선(WI-SUN)
	: 스마트 그리드와 같은 장거리 무선 통신을 필요로 하는 사물인터넷
	  서비스를 위한 저전력 장거리 통신 기술
	*스마트 그리드
	: 전기의 생산부터 소비까지의 전 과정에 정보통신 기술을 접목하여
	  에너지 효율성을 높이는 지능형 전력망 시스템
	ㄹ. UWB(Ultra WideBand)
	: 초광대역 네트워크로 짧은 거리에서 많은 양의 디지털 데이터를 낮은 전력으로 전송하기 위한
	  무선 기술로 무선 디지털 펄스라고도 하며, 블루투스와 비교되는 기술임
	ㅁ. 피코넷(PICONET)
	: 여러개의 독립된 통신장치가 블루투스 기술이나 UWB 통신 기술을 사용하여
	  통신망을 형성하는 무선 네트워크 기술
	ㅂ. USN(Ubiquitous Sensor Network)
	: 각종 센서로 다양한 정보를 무선으로 수집할 수 있도록 구성한 네트워크
	ㅅ. SON(Self Organizing Network)
	: 자동 구성 네트워크로 주변 상황에 맞추어 스스로 망을 구성하는 네트워크
	ㅇ. 저전력 블루투스(BLE :: Bluetooth Low Energy)
	: 일반 블루투스와 동일한 주파수 대역을 사용하지만 연결되지 않은
	  대기 상태에서는 절전 모드를 유지하는 기술
	ㅅ. NFC(Near Field Communication)
	: 고주파를 이용한 근거리 무선 통신 기술로 아주 가까운 거리에서
	  양방향 통신을 지원하는 RFID 기술의 일종임

클라우드 컴퓨팅(Cloud Computing)
: 각종 컴퓨터 자원을 중앙 컴퓨터에 두고 인터넷 기능을 갖는 단말기로
  언제 어디서나 인터넷을 통해 컴퓨터 작업을 수행할 수 있는 환경
*클라우드
: 네트워크 상에 숨겨진 다양한 기기들이 공유되어 있는 인터넷 환경
	- 클라우드 컴퓨팅은 중앙의 대형 데이터 센터의 컴퓨팅 자원을
	  필요한 이들에게 필요한 순간에 빌려주는 방식
		ㄱ. 모바일 클라우딩 컴퓨팅
		: 클라우드 서비스를 이용하여 소비자와 소비자의 파트너가 모바일 기기로
		  클라우드 컴퓨팅 인프라를 구성하여 여러 가지 정보와 자원을 공유하는 기술
		ㄴ. 인터클라우드 컴퓨팅
		: 각기 다른 클라우드 서비스를 연동하거나 컴퓨팅 자원의 동적 할당이 가능하도록
		  여러 클라우드 서비스 제공자들이 제공하는 클라우드 서비스나 자원을 연결하는 기술
		ㄷ. 파스-타(Paas-TA)
		: 소프트웨어 개발 환경을 제공하기 위해 개발한 개방형 클라우드 컴퓨팅 플랫폼
		[설명] - 왜 클라우드가 대세일까?
		약 3~4년 전부터 네이버 클라우드, 구글 클라우드, AWS등 수많은 클라우드 서비스가
		생겨나고 발전하고 있습니다. 클라우는 매우 편리하고 좋은 기술입니다.
		클라우드가 생기기 전에는 물리적인 데이터서버를 꼭 구축하여야만 했고 이는
		기업 입장에서나 꽤나 돈이 많이 들어가기 때문에 자본력이 부족한 중소기업에게는
		실질적으로 어려운 일이었죠. 그러나 클라우드가 보편화되고 나서는 기업 입장에서
		돈이 많이 들어가는 물리적인 데이터베이스를 구축하거나 데이터 센터를 가지고 있지
		않아도 대기업이 구축해놓은 데이터베이스 센터를 사용하여 훨씬 저렴한 가격에
		데이터베이스를 임대하고 구축할 수 있으며, 사용한 만큼 돈을 내기 때문에 실제 물리
		구축보다는 저렴한 가격으로 사용할 수 있게 되었답니다.
		그래서 요즘 엔지니어 채용 공고를 보면 AWS 경험자, 구글 클라우드 경험자 혹은
		관련 자격 보유자들을 우대 조건하고 있습니다.

NDN(Named Data Networking)
: 콘텐츠 자체의 정보와 라우터 기능만으로 데이터 전송을 수행하는 기술

NGN(Next Generation Network, 차세대 통신망)
: 유선망 기반의 차세대 통신망으로 유선망뿐만 아니라 이동 사용자를 목표로 하며
  이동 통신에서 제공하는 완전한 이동성 제공을 목표로 개발

SDN(Software Defined Networking)
: 네트워크를 컴퓨터처럼 모델링하여 여러 사용자가 각각의 소프트웨어들로
  네트워킹을 가상화하여 제어하고 관리하는 네트워크

WBAN(Wireless Body Area Network)
: 웨어러블 또는 몸에 심는 형태의 센서나 기기를 무선으로 연결하는
  개인 영역 네트워킹 기술

GIS(Geographic Information System)
: 지리적인 자료를 수집, 저장, 분석, 출력할 수 있는 컴퓨터 응용 시스템으로
  위성을 이용해 모든 사물의 위치 정보를 제공해줌

USN(Ubiquitous Sensor Network)
: 각종 센서로 수집한 정보를 무선으로 수집할 수 있도록 구성하는 네트워크

애드 혹 네트워크(Ad-hoc Network)
: 재난 현장과 같이 별도의 고정된 유선망을 구축할 수 없는 장소에서
  모바일 호스트만을 이용하여 구성한 네트워크

네트워크 슬라이싱(Network Slicing)
: 여러 글로벌 이동통신 표준화 단체가 선정한 SG의 핵심기술 중 하나로 네트워크에서
  하나의 물리적인 코어 네트워크 인프라를 독립된 다수의 가상 네트워크로 분리하여
  각각의 네트워크를 통해 다양한 고객 맞춤형 서비스를 제공하는 것을 목적으로 하는 네트워크 기술

파장 분할 다중화(WDM ::Wavelength Division Multiplexing)
: 광섬유를 이용한 통신 기술의 하나로, 파장이 다른 광선끼리 서로 간섭을 일으키지 않는 성질을
  이용하여 서로 다른 복수의 신호를 보냄으로써 여러 대의 단말기가 동시에 통신 회선을 사용할 수
  있도록 하는 기술

개방형 링크드 데이터(LOD ::Linked Open Data)
: 누구나 사용할 수 있도록 웹상에 공개된 연계 데이터를 의미함
[설명] 대표적인 한국의 개방형 데이터는 '공공데이터 포털'이라는 사이트가 있음

SSO(Single Sign On)
: 한 번의 로그인으로 개인이 가입한 모든 사이트를 이용할 수 있게 해주는 시스템

스마트 그리드(Smart Grid)
: 정보 기술을 전력에 접목해 효율을 높인 시스템


네트워크 구축

네트워크 설치 구조
: 정보를 전달하기 위해 통신 규약에 의해 연결한 통신 설비의 집합
[설명]
네트워크 망을 어떠한 형태로 구성할 것인지에 대한 설명과 장단점이라고 생각하면 됨
	ㄱ. 성형(Star ::중앙 집중형)
	: 중앙 컴퓨터가 있고, 중앙 컴퓨터에 단말 장치들이 연결되는 네트워크 구성 형태
		- Point-to-Point 방식으로 연결
		- 중앙 집중이므로 교환 노드의 수가 가장 적음
		- 단말장치가 고장 나더라도 전체에 영향을 주지 않지만
		  중앙장치가 고장이 나면 전체에 영향을 줌
	ㄴ. 링형(Ring ::루프형)
	: 컴퓨터와 단말장치들을 서로 이웃하는 것끼리
	Point-to Point 방식으로 연결한 형태
		- 데이터는 단방향 또는 양방향으로 전송 가능
		- 하나의 단말장치라도 고장 시 전체에 영향을 줌
		- 분산 및 집중 제어 모두 가능
		- 중계기의 수가 많아짐
		- 단말장치의 추가/제거 및 기밀 보호가 어려움
	ㄷ. 버스형(Bus)
	: 한 개의 통신 회선에 여러 대의 단말 장치가 연결되어 있는 형태
		- 단말장치가 고장이 나도 전체에 영향을 주지 않음
		- 물리적 구조가 간단하고, 단말장치 추가와 제거가 용이
		- 기밀 보장이 어려우며 통신 회선 길이에 제한이 있음
	ㄹ. 계층형(Tree ::분산형)
	: 중앙 컴퓨터와 일정 지역의 단말 장치까지는 하나의 회선으로 연결시키고
	  이웃하는 단말장치는 일정 지역 내 설치된 중간 단말장치로부터
	  다시 연결시키는 형태
		- 분산처리 시스템을 구성하는 방식
	ㅁ. 망형(Mesh)
	: 모든 지점의 컴퓨터와 단말장치를 서로 연결시킨 상태
		- 많은 양의 통신을 필요로 하는 경우 사용
		- 필요한 포트의 수 = 노드수 - 1 = n-1
		- 필요한 회선의 수 = 노드 수(노드 수 - 1) / 2 = n(n-1)/2

네트워크 분류
ㄱ. 근거리 통신망(LAN ::Local Area Network)
: 비교적 가까운 거리에 있는 노드들을 연결하여 구성
	- 회사 학교 연구소 등에서 비교적 가까운 거리에 있는 컴퓨터, 프린터등과
	  같은 자원을 연결하여 구성
	- 자원 공유가 주목적임
	- 거리가 짧으므로 데이터 전송 속도가 빠르고 에러 발생률이 낮음
	- 주로 버스형이나 링형으로 구성
ㄴ. 도시 지역 통신망(MAN ::Metropolitan Area Network)
: LAN보다 큰 도시 지역을 이어주는 통신망을 말함.
  LAN기능을 포함하며 고속 전송 기능을 가진 네트워크
ㄷ. 광대역 통신망(WAN ::Wide Area Network)
: 국가와 국가, 대륙과 대륙 등 멀리 떨어진 사이트들을 연결하여 구성
	- 일정 지역은 LAN으로 연결하고 각 LAN을 연결하는 방식을 사용
	- 사이트 간의 거리가 멀기 때문에 통신 속도가 느리고, 에러 발생률이 높음
ㄹ. VLAN(Virtual Local Area Network)
: LAN의 물리적 배치와는 무관하게 논리적으로 분류하는 기술로,
  접속된 장비들의 성능 및 보안성을 향상시킬 수 있음
[설명] - 데이터 전송 방법 CSMA/CA를 아시나요?
현재 저희가 사용하는 대부분의 인터넷에서 데이터 전송 시 CSMA/CA라는 방식을 사용합니다.
이는 Carrier Sense Multiple Access/Collision Avoidance의 줄임말로 데이터 전송 시 매체가
비어있음을 확인하고 충돌을 피하기 위해 일정한 시간을 기다렸다가 데이터를 전송하는 방법입니다.


경로/트래픽 제어

경로 제어
: 전송 경로 중 어느 한 경로에 데이터의 양이 집중되는 것을 피하면서 최저의 비용으로
  최단 시간에 송신할 수 있는 경로인 최적 패킷 교환 경로를 설정
*패킷
: 컴퓨터 간에 데이터를 주고 받을 때 네트워크를 통해서 전송되는 데이터 조각
	- 경로 제어표를 참조해서 라우터에 의해 수행
	- 경로 제어 요소 : 성능 기준, 경로의 결정 시간 / 장소, 정보 발생지,
	  경로 정보의 갱신 시간

경로 제어 프로토콜
: 효율적인 경로 제어를 위해 네트워크를 제어하는 프로토콜
*프로토콜
: 컴퓨터나 원거리 통신 장비 사이에서 메시지를 주고받을 때 양식과 규칙의 체계(약속된 룰)
	ㄱ. IGP(Interior Gateway Protocol ::내부 게이트웨이 프로토콜)
	: 하나의 자율 시스템(AS) 내의 라우팅에 사용
	*자율 시스템(Autonomous System)
	: 하나의 도메인에 속하는 라우터들의 집함
		a. RIP(Routing Information Protocol)
		: 현재 가장 널리 사용되며 소규모 동종의 네트워크 내에서 효율적인 방법
			- 최단 경로 탐색에 Bellman-Ford 알고리즘이 사용
			- 라우팅 정보를 30초마다 네트워크 내의 모든 라우터에게 알림
			- 거리 벡터 라우팅 프로토콜이라고도 함
			- 최대 홉 카운트는 15임
		b. OSPF(Open Shortest Path First Protocol :: )
		: RIP의 단점을 해결하여 새로운 기능을 지원하는 인터넷 프로토콜로
		  대규모 네트워크에서 많이 사용
			- 인터넷 망에서 이용자가 최단 경로를 선정할 수 있도록 라우팅 정보에
			  노드 간의 거리 정보, 링크 상태 정보를 실시간으로 반영하여 최단경로 라우팅 지원
			- 다익스트라 알고리즘을 사용
			- 라우팅 정보에 변화가 생길 경우 변화된 정보만 네트워크 내의
			  모든 라우터에 알림
	ㄴ. EGP(Exterior Gateway Protocol ::외부 게이트웨이 프로토콜)
	: 자율 시스템 / 게이트웨이 간 라우팅에 사용되는 프로토콜
	ㄷ. BGP(Border Gateway Protocol)
	: 자율 시스템 간의 라우팅 프로토콜
		- EGP의 단점을 보완하기 위해 만들어짐
		- 초기 연결 시 라우팅 테이블을 교환하고 이후에는 변화된 정보만을 교환

트래픽 제어(Trafiic Control)
: 네트워크의 보호, 성능 유지, 자원의 효율적인 이용을 위해 전송되는 패킷의
  흐름, 양을 조절하는 기능
	ㄱ. 흐름 제어(Flow Control)
	: 네트워크 내의 원활한 흐름을 위해 송수신 사이 전송되는 패킷의 양이나 속도를 규제하는 기능
		- 송수신간 처리 속도 또는 버퍼 크기의 차이에 의해 생길 수 있는 버퍼 오버플로우를 방지
			a. 정지-대기(Stop-and-Wait)
			: 수신 측에서 확인 신호를 받아야 다음 패킷을 전송
				- 한 번에 하나의 패킷만 전송 가능
			b. 슬라이딩 윈도우(Sliding Window)
			: 수신 통지를 이용하여 송신 데이터의 양을 조절하는 방식
				- 수신 측의 확인 신호를 받지 않더라도 미리 정해진 패킷의 수만큼
				  연속적으로 전송하는 방식으로, 한 번에 여러 개의 패킷을
				  전송할 수 있어 전송 효율이 좋음
	ㄴ. 혼잡 제어(Congestion Control)
	: 네트워크 내의 패킷 수를 조절하여 네트워크의 오버플로우를 방지하는 기능
		a. 느린 시작(Slow Start)
		: 윈도우의 크기를 1, 2, 4, 8,...과 같이 2배씩 지수적으로 증가시켜
		  초기에는 느리지만 갈수록 빨라짐
		b. 혼잡 회피(Congestion Avoidance)
		: 느린 시작의 지수적 증가가 임계값에 도달되면 혼잡으로 간주하고
		  회피를 위해 윈도우의 크기를 1씩 선형적으로 증가시켜
		  혼잡을 예방하는 방식

교착상태 방지(Dead Lock)
: 교착 상태란 교환기 내에 패킷들을 축적하는 기억 공간이 꽉 차 있을 시 다음 패킷들이
  기억 공간에 들어가지 못하기 때문에 무한정 기다리는 현상을 말함
	- 패킷이 같은 목적지를 갖지 않도록 할당


소프트웨어/보안 관련 신기술 용어

SW 관련 신기술 용어 모음
ㄱ. 인공 지능(AI ::Artificial Intelligence)
: 인간의 두뇌와 같이 컴퓨터 스스로 추론, 학습, 판단 등 인간 지능적인 작업을 수행하는 시스템
ㄴ. 뉴럴링크(NeuralLink)
: 테슬라의 CEO 일론 머스크가 사람의 뇌와 컴퓨터와 결합하는 기술을 개발하기 위해 설립한 회사
ㄷ. 딥 러닝(Deep Learning)
: 인간의 두뇌를 모델로 만들어진 인공 신경망을 기반으로 하는 기계 학습 기술
ㄹ. 전문가 시스템(Expert System)
: 특정 분야의 전문가가 수행하는 고도의 업무를 지원하기 위한 컴퓨터 응용 프로그램
ㅁ. 가상현실(VR ::Virtual Reality)
: 컴퓨터 등을 사용하여 실제와 유사하지만 실제가 아닌 환경이나 상황을 구현하는 기술
ㅂ. 증강현실(AR ::Augmented Reality)
: 실제 촬영한 화면에 가상의 정보를 부가하여 보여주는 기술
[설명]
가상현실과 증강현실은 다릅니다! 가상현실의 대표적인 예는 저희가 주로 vive같은 게임 도구를
사용하여 사이버 공간에 구축해 놓은 공간에서 활동하는 것이라면 증강현실은 말 그대로 현실에서
확장(증강)하여 보여주는 세계입니다. 대표적인 예라면 포켓몬Go처럼 현실 세계 위에서 핸드폰을
이용해 가상의 포켓몬을 보여주고 잡을 수 있도록 하는 것을 증강 현실이라고 한답니다.
ㄹ. 혼합 현실(Mixed Reality)
: 가상현실과 현실 세계를 합쳐 현실의 물리적인 객체와 가상의 객체가 상호작용할 수 있는
  환경을 구현하는 기술
ㅁ. 그레이웨어(Grayware)
: 소프트웨어를 제공하는 입장에서는 악의적이지 않은 유용한 소프트웨어 일지라도
  사용자 입장에서는 유용할 수도 있고 악의적일 수도 있는 악성 코드나 공유 웨어
	- 애드웨어나 트랙웨어, 악성 공유코드나 공유웨어를 말함
	*애드웨어(Adware)
	: 소프트웨어 자체에 광고를 포함하여 이를 보는 대가로 무료로 사용하는 소프트웨어
	*트랙웨어(Trackware = Spyware)
	: 적절한 사용자 동의 없이 사용자 정보를 수집하는 프로그램
	[설명] - 왜 다른 색도 아니고 하필 그레이+웨어(프로그램) 일까?
	사실 IT업계의 일종의 은어입니다. Black = 나쁜 일을 하는 사람, White = 착한 일을 하는 사람
	같은 IT계의 은어인데 그레이웨어 같은 경우에는 쓰는 경우에 따라 좋은 일이 될 수도 나쁜 일이
	될 수도 있기에 그 중간의 색인 그레이 라고 부르는 것! 실제 현장에서도 어둠의 직종이나 해커들을
	영입할 때 "사실 ~ 이건 진짜 쬐금 Black 한 일이긴 한데 ~ 진짜 범죄는 아니거든? 한 번 해볼래?
	돈 진짜 잘 벌어" 같은 식으로 영입 제안을 받기도 합니다.
ㅂ. 리치 인터넷 애플리케이션(RIA ::Rich Internet Application)
: 플래시 애니메이션 기술과 웹 서버 애플리케이션 기술을 통합하여 기존 HTML보다 역동적인
  웹페이지를 제공하는 플래시 웹페이지 제작 기술
ㅅ. 시맨틱 웹(Semantic Web)
: 컴퓨터가 사람을 대신하여 정보를 읽고 이해하고 가공하여 새로운 정보를 만들어 낼 수 있도록
  이해하기 쉬운 의미를 가진 차세대 지능형 웹
ㅇ. 증발품(Vaporware)
: 판매 계획 또는 배포 계획은 발표되었으나 실제로 고객에게는 판매되거나
  배포되지 않고 있는 소프트웨어
ㅈ. 오픈 그리드 서비스 아키텍처(Open Grid Service Architecture)
: 애플리케이션 공유를 위한 웹 서비스를 그리드 상에서 제공하기 위해 만든 개방형 표준
ㅊ. 서비스 지향 아키텍처(Service Oriented Architecture)
: 기업의 소프트웨어 인프라인 정보시스템을 공유와 재사용이 가능한 서비스 단위나
  컴포넌트 중심으로 구축하는 정보기술 아키텍처
ㅋ. 서비스형 소프트웨어(SaaS ::Software as a Service)
: 소프트웨어의 여러 기능 중에서 사용자가 필요로 하는 서비스만 이용할 수 있도록 한 소프트웨어
ㅌ. 복잡 이벤트 처리(Complex Event Processing)
: 실시간으로 발생하는 많은 사건들 중 의미가 있는 것만을 추출할 수 있도록
  사건 발생 조건을 정의하는 데이터 처리 방법
ㅍ. 디지털 트윈(Digital Twin)
: 현실속의 사물을 소프트웨어로 가상화한 모델로, 실제 자산의 특성에 대한 정확한 정보를 얻을 수 있고,
  생산성 증가 등 서비스 전반에 이르는 모든 과정의 효율성을 향상시킬 수 있음
ㅎ. 텐서플로(TensorFlow)
: 구글 브레인 팀이 만들 다양한 작업에 대해 데이터 흐름 프로그래밍을 위한 오픈소스 소프트웨어 라이브러리

보안 관련 신기술 용어 모음
ㄱ. 블록체인(Blockchain)
: P2P 네트워크를 이용하여 온라인 금융 거래 정보를 온라인 네트워크 참여자의
  디지털 장비에 분산 저장하는 기술
*P2P(Peer-to-Peer)
: 개인 대 개인이라는 의미로 네트워크에서 개인 대 개인이 PC를 이용하여 서로 데이터를 공하는 방식
ㄴ. 분산 원장 기술(Distributed Ledger Technology)
: 중앙 관리자나 중앙 데이터 저장소가 존재하지 않고 P2P 망 내의 참여자들에게 모든 거래 목록이
  분산 저장되어 거래가 발생할 때마다 지속적으로 갱신되는 디지털 원장
ㄷ. 양자 암호키 분배(Quantum Key Distribution)
: 양자 통신을 위해 비밀키를 분배하여 관리하는 기술
ㄹ. 프라이버시 강화 기술(Privacy Enhancing Technology)
: 개인 정보 위험 관리 기술로 암호화, 익명화 등 개인정보를 보호하는 기술에서 사용자가 직접
  개인정보를 통제하기 위한 기술까지 다양한 사용자 프라이버시 보호 기술을 통칭
ㅁ. 공통 평가 기준(Common Criteria)
: ISO 15408 표준으로 채택된 정보 보호 제품 평가 기준
ㅂ. 개인정보 영향평가 제도(Privacy Impact Assessment)
: 개인정보를 활용하는 새로운 정보 시스템의 도입 및 기존 정보 시스템의 중요한 변경 시
  시스템의 구축, 운영이 기업의 고객은 물론 국민의 사생활에 미칠 영향에 대해 미리 조사, 분석, 평가하는 제도
ㅅ. 소프트웨어 에스크로(Software Secrow)
: 소프트웨어 개발자의 지적 재산권을 보호하고 사용자는 저렴한 비용으로 소프트웨어를 안정적으로 사용 및 유지보수
  받을 수 있도록 소스 프로그램과 기술 정보 등을 제3의 기관에 보관하는 것
ㅇ. 서비스형 블록체인(BlockChain as a Service)
: 블록체인 앱의 개발 환경을 클라우드 기반으로 제공하는 서비스
ㅈ. OWASP(Open Web Application Security Project)
: 웹 정보 노출이나 악성 코드, 스크립트, 보안이 취약한 부분을 연구하는 비영리 단체


소프트웨어 개발 보안
: 소프트웨어 개발 과정에서 발생할 수 있는 보안 취약점을 최소화하여 보안 위협으로부터
  안전한 소프트웨어를 개발하기 위한 보안 활동
	- 데이터의 기밀성, 무결성, 가용성을 유지하는 것이 목표
		ㄱ. 기밀성(Confidentiality)
		: 인가된 사람만 시스템에 접근 가능
		ㄴ. 가용성(Availability)
		: 정보는 인가받은 사용자가 필요로 하는 시점에 언제든 접근 가능해야 함
		ㄷ. 무결성(Integrity)
		: 시스템 내의 정보는 오직 인가받은 사용자만 수정할 수 있음

소프트웨어 개발 보안 관련 기관
 - 행정안전부(정책기관), 한국인터넷진흥원(전문기관), 행정기관(발주기관), 사업자(개발기관), 감리법인(보안 약점 진단)


하드웨어 관련 신기술 용어 모음
ㄱ. 고가용성(High Availability)
: 긴 시간동안 안정적인 서비스 운영을 위해 장애 즉시 다른 시스템으로 대체 가능한
  환경을 구축하는 메커니즘
ㄴ. 3D 프린팅(Three Dimension Printing)
: 평면에 출력하는 것이 아닌 얇은 두께로 한층한층 적재시켜
  하나의 형태를 만들어내는 기술
ㄷ. 4D 프린팅(Fourth Dimension Printing)
: 특정 시간이나 환경 조건이 갖추어지면 스스로 형태를 변화시키거나
  제조되는 자가 조립 기술이 적용된 제품을 3D 프린팅 하는 기술
ㄹ. RAID(Redundant Array of Inexpensive Disk)
: 여러 개의 하드디스크로 디스크 배열을 구성한 후 파일을 구성하여 파일을 구성하고 있는
  데이터 블록들을 서로 다른 디스크들에 분산 저장하는 기술
	- RAID는 어느 한 디스크에만 결함이 발생해도 전체 데이터에 파일이 손상되는 문제가 발생하는데,
	  이러한 문제를 해결하기 위해 디스크 배열에 오류 검출 및 복구를 위한 여분의 디스크들을
	  추가하여 오류가 발생해도 원래의 데이터를 복구할 수 있다.
	- RAID는 1~5까지 다섯 종류가 있음
ㅁ. 앤 스크린(N-Screen)
: N개의 서로 다른 단말기에서 동일한 콘텐츠를 자유롭게 이용할 수 있는 서비스
	- 사용자가 가진 여러 단말기에서 동일한 콘텐츠를 끊김없이 이용할 수 있음
ㅂ. 컴패니언 스크린(Companion Screen)
: TV 방송 시청 시 방송 내용을 공유하며 추가적인 기능을 수행할 수 있는 디바이스,
  세컨드 스크린 이라고 하기도 함
ㅅ. 신(Thin) 클라이언트 PC
: 하드디스크나 주변 장치 없이 기본적인 메모리만 갖추고 서버와 네트워크로 운용되는 개인용 컴퓨터를
  말하는 것으로, 서버 기반 컴퓨팅과 관계가 깊음
ㅇ. 멤스(MEMS ::Micro-Electro Mechanical System)
: 초정밀 반도체 기술을 바탕으로 센서나 액추에이터 등 기계 구조를 다양한 기술로 미세 가공하여
  전기기계적 동작을 할 수 있도록 한 초미세 장치
ㅈ. 패블릿(Phablet)
: 태블릿 기능을 포함한 5인치 이상의 대화면 스마트폰
ㅊ. 트러스트존 기술(TrustZone Technology)
: ARM에서 개발한 하나의 프로세서 내에 일반 애플리케이션을 처리하는 일반 구역과 보안이 필요한
  에플리케이션을 처리하는 보안 구역으로 분할하여 관리하는 하드웨어 기반의 보안 기술
ㅌ. 엠디스크(M-Disk)
: 한 번의 기록만으로도 자료를 영구 보관할 수 있는 광 저장장치
ㅋ. 멤리스터(Memristor)
: 메모리와 레지스터의 합성어로 전류의 방향과 양 등 기존의 경험을 모두 기억하는 소자


Secure OS
: 기존의 운영체제(OS)에 내재된 보안 취약점을 해소하기 위해 보안 기능을 갖춘 커널을 이식하여
  외부의 침입으로부터 시스템 자원을 보호하는 운영체제
*운영체제(Operating System)
: 운영체제 또는 오퍼레이팅 시스템은 사용자의 하드웨어, 시스템 리소스를 제어하고
  프로그램에 대한 일반적 서비스를 지원하는 시스템 소프트웨어
*커널(Kernel)
: 컴퓨터가 부팅될 때 주기억장치에 적재된 후 실행된 상태로 상주하면서 하드웨어를 보호하고,
  프로그램와 하드웨어 간의 인터페이스 역할을 담당

Secure OS의 보안 기능
: 식별 및 인증, 임의적 접근통제, 강제적 접근 통제, 객체 재사용 보호, 완전한 조정,
  신뢰 경로, 감사 및 감사기록 축소 등이 있음


DB 관련 신기술 용어
ㄱ. 빅데이터(BigData)
: 기존의 관리 방법이나 분석 체계로는 처리하기 어려운 막대한 양의 정형 / 비정형 데이터 집합
	- 빅데이터를 분석하여 미래를 예측하고, 발생했거나 발생할 문제에 대한 대응이 가능해짐
ㄴ. 브로드 데이터(Broad Data)
: 다양한 채널에서 소비자와 상호 작용을 통해 생산 되었거나 기업 마케팅에 있어 효율적이고
  다양한 데이터, 이전에 사용하지 않거나 몰랐던 새로운 데이터나 기존 데이터에 새로운 가치가 더해진
  데이터를 의미
ㄷ. 메타데이터(Meta Data)
: 일련의 데이터를 정의하고 설명해주는 데이터
	- 메타 데이터는 여러 용도로 사용되나 주로 빠르게 검색하거나
	  내용을 간략하고 체계적으로 하기 위해 많이 사용함
ㄹ. 디지털 아카이빙(Digital Archiving)
: 디지털 정보 자원을 장기적으로 보존하기 위한 작업
ㅁ. 하둡(Hadoop)
: 오픈 소스를 기반으로 한 분산 컴퓨팅 플랫폼
	- 하둡을 이용하면 대량의 데이터를 처리할 수 있음
	- 하둡과 관계형 데이터베이스간 대용량 데이터를 전송할 때는 스쿱(Sqoop)이라는 도구를 사용함
ㅂ. 타조(Tajo)
: 우리나라가 주도적으로 개발 중인 하둡 기반의 분산 데이터 웨어하우스 프로젝트
*데이터 웨어하우스(Data Warehouse)
: 정보와 창고의 합성어로 기업의 의사결정 과정에 효과적으로 사용될 수 있도록 여러 시스템에 분산되어
  있는 데이터를 주제별로 통합/축적해 놓은 데이터 베이스
ㅅ. 맵리듀스(MapReduce)
: 대용량 데이터를 분산 처리하기 위한 목적으로 개발된 프로그래밍 모델로, 흩어져 있는 데이터를
  연관성 있는 데이터 분류로 묶는 Map 작업을 수행한 후 중복 데이터를 제거하고 원하는 데이터를
  추출하는 Reduce 작업을 수행
ㅇ. 데이터 다이어트(Data Diet)
: 데이터를 삭제하는 것이 아닌 압축하고 중복된 정보는 중복을 배제하며,
  새로운 기준에 따라 나누어 저장하는 작업
ㅈ. 데이터 마이닝(Data Mining)
: 데이터 웨어하우스에 저장된 데이터 집합에서 사용자의 요구에 따라 유용하고
  가능성 있는 정보를 발견하기 위한 기법
ㅊ. OLAP(Online Analytical Processing)
: 다차원으로 이루어진 데이터로부터 통계적인 요약 정보를 분석하여 의사 결정에 활용하는 방식


회복 / 병행제어

회복(Recovery)
: 트랜잭션들을 수행하는 도중 장애가 발생하여 데이터베이스가 손상되었을 때
  손상되기 전의 정상 상태로 복구하는 작업

장애의 유형
ㄱ. 트랜잭션 장애
: 입력 데이터 오류, 불명확한 데이터, 시스템 자원 요구의 과다 등 트랜잭션 내부의 비정상적인
  상황으로 인하여 프로그램 실행이 중지되는 현상
ㄴ. 시스템 장애
: 데이터베이스에 손상을 입히지는 않으나 하드웨어 오동작, 소프트웨어의 손상, 교착상태 등에
  의해 트랜잭션의 연속적인 수행에 장애를 주는 현상
ㄷ. 미디어 장애
: 저장장치인 디스크 블록의 손상이나 디스크 헤드의 충돌 등에 의해
  데이터베이스의 일부 또는 전부가 물리적으로 손상된 상태

회복 기법
ㄱ. 연기 갱신 기법(Deferred Update)
: 트랜잭션이 성공적으로 완료될 때까지 데이터베이스에 대한 실직적인 갱신을 연기하는 방법
	- 트랜잭션이 수행되는 동안 갱신된 내용은 일단 Log에 보관
	- 트랜잭션의 부분 완료 시점에 Log에 보관한 갱신 내용을 실제 데이터베이스에 기록
ㄴ. 즉각 갱신 기법(Immediate Update)
: 트랜잭션이 데이터를 갱신하면 트랜잭션이 부분 완료되기 전이라도 즉시 실제
  데이터베이스에 반영하는 기법
	- 장애가 발생하여 회복 작업할 경우를 대비하여 갱신된 내용들을 Log에 보관
	- 회복 작업을 할 경우 Redo 와 Undo 모두 사용 가능
	*Redo
	: 작업 재시도
	*Undo
	: 작업 취소
ㄷ. 그림자 페이지 대체 기법(Shadow Paging)
: 갱신 이전의 데이터베이스를 일정 크기의 페이지 단위로 구성하여 각 페이지마다 복사본 그림자 페이지로
  별도 보관해 놓으며, 실제 페이지를 대상으로 트랜잭션에 의한 갱신 작업을 하다가 장애가 발생하면
  트랜잭션 작업을 RollBack 시킬 때, 갱신된 이후의 실제 페이지 부분에 그림자 페이지를 대체하여
  회복시키는 기법
ㄹ. 검사적 기법(Chack Point)
: 트랜잭션 실행 중 특정 단계에서 재실행할 수 있도록 갱신 내용이나 시스템에 대한 상황 등에 관한 정보와
  함께 검사점을 로그에 보관해두고, 장애 발생 시 트랜잭션 전체를 철회하지 않고 검사점부터 회복 작업을
  하여 회복시간을 절약하도록 하는 기법

병행제어
: 다중 프로그램의 이점을 활용하여 동시에 여러 개의 트랜잭션을 병행 수행할 때, 동시에 실행되는
  트랜잭션들이 데이터베이스의 일관성을 파괴하지 않도록 트랜잭션 간의 상호 작용을 제어하는 ㄴ것

병행제어의 목적
	- 데이터베이스의 공유 최대화
	- 시스템 활용도 최대화
	- 데이터베이스 일관성 유지
	- 사용자에 대한 응답 시간 최소화

병행제어 기법의 종류
ㄱ. 로킹(Locking)
: 주요 데이터의 액세스를 상호 배타적으로 하는 것
	- 트랜잭션들이 어떤 로킹 단위를 액세스하기 전에 Lock을 요청해서
	  Lock이 허락되어야만 그 로킹 단위를 액세스할 수 있도록 하는 기법
	- 로킹의 대상이 되는 객체의 크기를 로킹 단위라고 함
	- 데이터베이스도 로킹 단위 가능
	- 로킹 단위가 커지면 로크 수가 작아 로킹 오버헤드 감소
ㄴ. 타임 스탬프 순서(Time Stamp Ordering)
: 트랜잭션과 트랜잭션이 읽거나 갱신한 데이터에 대해 트랜잭션이 실행을 시작하기 전에
  시간표를 부여하여 부여된 시간에 따라 트랜잭션 작업을 수행하는 기법
	- 교착상태가 발생하지 않음
	- 직렬성 순서를 결정하기 위해 트랜잭션 간의 처리 순서를 미리 선택하는 기법들 중
	  가장 보편적인 방법
ㄷ. 최적 병행수행(검증 기법/낙관적 기법)
: 병행 수행하고자 하는 대부분의 트랜잭션이 판독 전용 트랜잭션일 경우, 트랜잭션 간의 충동률이
  매우 낮아서 병행제어 기법을 사용하지 않고 실행되어도 이 중의 많은 트랜잭션을 시스템의 상태를
  일관성 있게 유지한다는 점을 이용한 기법
ㄹ. 다중 버전 기법
: 타임 스탬프의 개념을 이용하는 기법으로 다중 버전 타임 스탬프 기법이라고도 함
	- 갱신될 때마다 버전을 부여하여 관리

로킹 단위(Locking Granularity)
: 병행제어에서 한꺼번에 로킹할 수 있는 객체의 크기를 의미
	- 데이터베이스, 파일, 레코드, 필드 등이 로킹 단위가 될 수 있음
	- 로킹 단위가 크면 로크 수가 작아 관리하기 쉽지만 병행성 수준이 낮아지고,
	  로킹 단위가 작으면 로크 수가 많아 관리하기 복잡해 오버헤드가 증가하지만
	  병행성 수준이 높아짐


교착상태(Dead Lock)
: 상호 배제에 의해 나타나는 문제점으로, 둘 이상의 프로세스들이 자원을 점유한 상태에서
  서로 다른 프로세스가 점유하고 있는 자원을 요구하며 무한정 기다리는 현상
[설명]
교착상태는 주로 자동차와 도로에 빗대어서 설명을 많이 하는데 자동차(프로세스)들이 현재 위치한
길(자원)을 점유하면서 동시에 다른 차가 사용하는 길을 사용하여 지나가려고 대기하고 있지만
다른 길을 사용할 수 없으면서 동시에 현재 길에서도 벗어날 수 없는 상태를 말함

교착 상태 발생의 필요 충분 조건
: 아래의 네 가지 조건이 충족되어야 하는데, 이 중 하나라도 충족하지 않으면 교착상태가 발생하지 않음

	상호 배제		한 번에 한 개의 프로세스만이 공유 자원을 사용할 수 있음

	점유와 대기	최소한 하나의 자원을 점유하고 있으면서 다른 프로세스에 할당되어
			사용되고 있는 자원을 추가로 점유하기 위해 대기하는 프로세스가 있어야 함

	비선점		다른 프로세스에 할당된 자원은 사용이 끝날 때까지 강제로 빼앗을 수 없어야 함

	환형 대기		공유 자원과 공유 자원을 사용하기 위해 대기하는 프로세스들이 원형으로
			구성되어 있어 자신에게 할당된 자원을 점유하면서 앞이나 뒤에 있는
			프로세스의 자원을 요구해야 함

교착상태 해결 방법

	예방 기법		- 사전에 시스템을 제어하는 방법으로, 교착상태 발생의 네 가지 조건 중
	(Prevention)	  하나를 제거함으로써 수행
			- 자원의 낭비가 가장 심한 기법

	회피 기법		- 교착 상태가 발생할 가능성을 배제하지 않고 교착상태가 발생하면
	(Avoidance)	  적절히 피해나가는 방법으로 주로 은행원 알고리즘에 사용
			*은행원 알고리즘
			: Dijkstra가 제안한 방법으로, 은행에서 모든 고객의 요구가 충족되도록
			  현금을 할당하는데서 유래한 기법

	발견 기법		- 시스템에 교착상태가 발생했는지 점검하고 교착상태에 있는
	(Detection)	  프로세스와 자원을 발견하는 것을 의미

	회복 기법		- 교착상태를 일으킨 프로세스를 종료하거나 교착상태의 프로세스에
	(Recovery)	  할당된 자원을 선점하여 프로세스나 자원을 회복하는 것을 의미


Secure SDLC(Software Development Life Cycle)
: 보안상 안전한 소프트웨어를 개발하기 위해 SDLC에 보안 강화를 위한 프로세스를 포함한 것
*SDLC
: 소프트웨어 개발 생명주기
	- 유지보수 단계에서 보안 이슈를 해결하기 위해 소모되는 비용을 최소화하기 위함
	- Secure Software 사의 CLASP, Microsoft 사의 SDL 등
		ㄱ. CLASP
		: Secure Software 사에서 개발하였으며, SDLC의 초기 단계에서 보안을 강화하기 위해
		  개발된 방법론
		ㄴ. SDL
		: 마이크로소프트 사에서 안전한 소프트웨어 개발을 위해 기존의 SDLC를 개선한 방법론
		ㄷ. Seven Touchpoints
		: 소프트웨어 보안의 모범사례를 SDLC에 통합한 방법론


세션 통제
: 세션의 연결과 연결로 인해 발생하는 정보를 관리하는 것
*세션
: 서버와 클라이언트의 연결을 의미
	- 요구사항 분석 및 설계 단계에서 진단해야 하는 보안 점검 내용

불충분한 세션 관리
	- 일정한 규칙이 존재하는 세션ID가 발급되거나 타임아웃이 너무 길게
	  설정되어 있는 경우 발생
	- 세션 하이재킹을 통해 획득한 세션ID로 접근할 수 있음
	*세션 하이재킹(Session Hijacking)
	: 세션 정보를 가로채는 공격

잘못된 세션에 의한 정보 노출
	- 다중 스레드 환경에서 멤버 변수에 정보를 저장할 때 발생
	- 변수의 범위를 제한하는 방법으로 방지 가능
	- 싱글톤 패턴에서 발생하는 레이스컨디션으로 인해 동기화 오류가 발생하거나
	  멤버 변수의 정보가 노출될 수 있음
	*레이스컨디션(Race Condition)
	: 두 개 이상의 프로세스가 공용 자원을 획득하기 위해 경쟁하고 있는 상태

세션 설계 시 고려사항
	- 로그아웃 요청 시 할당된 세션이 완전히 제거되도록 함
	- 이전 세션이 종료되지 않으면 새로운 세션이 생성되지 못하도록 함

입력 데이터 검증 및 표현
: 입력 데이터로 인해 발생하는 문제들을 예방하기 위해 구현 단계에서 검증해야 하는 보안 점검 항목
	- 개발 단계에서 유효성 검증 체계를 갖추고 검증되지 않은 데이터가 입력될 시
	  처리할 수 있도록 구현해야 함
	- 일관된 언어셋을 사용하여 코딩
	*언어셋(Character Set)
	: 언어셋은 문자를 컴퓨터에서 처리하기 위해 사용하는 코드표를 의미하며,
	  종류에는 ASCII, UNICIDE, UTF-8 등이 있음

입력 데이터 검증 및 표현의 보안 약점

	SQL 삽입			- 웹 응용 프로그램에 SQL을 삽입하여 내부 데이터베이스 서버의
	(SQL Injection)		  데이터를 유출 및 변조하고 관리자 인증을 우회하는 보안 약점
				[대안]
				동적 쿼리에 사용되는 입력데이터에 예약어 및 특수문자가 입력되지
				않도록 필터링 되도록 설정하여 방지할 수 있음

	경로 조작 및		- 데이터 입출력 경로를 조작하여 서버 자원을 수정 및 삭제할 수 있는
	자원 삽입			  보안 약점
				[대안]
				경로 순회 공격을 막는 필터를 사용하여 방지할 수 있음

	크로스 사이트		- 웹페이지에 악의적인 스크립트를 삽입하여 방문자들의 정보를
	스크립팅(XSS)		  달취하거나, 비정상적인 기능 수행을 유발하는 보안 약점
				[대안]
				HTML 태그의 사용을 제한하거나 스크립트에 삽입되지 않도록
				'<', '>', '&' 등의 문자를 다른 문자로 치환함으로 써 방지할 수 있음

	운영체제			- 외부 입력값을 통해 시스템 명령어의 실행을 유도함으로써
	명령어 삽입		  권한을 달취하거나 시스템 장애를 유발하는 보안 취약점
				[대안]
				웹 인터페이스를 통해 시스템 명령어가 전달되지 않도록 하고,
				외부 입력값을 검증 없이 내부 명령어로 사용하지 않음으로써
				방지할 수 있음

	위험한 형식		- 악의적인 명령어가 포함된 스크립트 파일을 업로드함으로써
	파일 업로드		  시스템에 손상을 주거나, 시스템을 제어할 수 있는 보안 약점
				[대안]
				업로드 되는 파일의 확장자 제한, 파일명의 암호화, 웹사이트와
				파일 서버의 경로 분리, 실행 속성을 제거하는 등의 방식으로
				방지할 수 있음

	신뢰되지 않는		- 입력 사이트 값으로 사이트 주소를 받는 경우 이를 조작하여
	URL주소로 연결		  방문자를 피싱사이트로 유도하는 보안 약점
				[대안]
				연결되는 외부 사이트의 주소를 화이트리스트로 관리함으로써
				방지할 수 있음
				*화이트 리스트
				: 허가 받은 접근 가능한 목록이라고 생각하면 됨
				  반대되는 말로는 블랙 리스트가 있는데 블랙리스트의 개념이
				  등록된 사람이 접근을 못하는 것이라면 화이트 리스트는
				  그 반대라고 생각하면 쉬움

	메모리 버퍼		- 연속된 메모리 공간을 사용하는 프로그램에서 할당된 메모리의
	오버플로			  범위를 넘어선 위치에서 자료를 읽거나 쓰려고 할 때 발생하는
				  보안 약점
				[대안]
				메모리 버퍼를 사용할 경우 적절한 크기를 설정하고, 설정된 범위의
				메모리 내에서 올바르게 읽거나 쓸 수 있도록 함으로써 방지할 수 있음


보안 기능
: 소프트웨어 구현 단계에서 코딩하는 기능인 인증, 접근제어, 기밀성, 암호화들을 올바르게 구현하기 위한
  보안 점검 항목
	ㄱ. 적절한 인증 없이 중요 기능 허용
	ㄴ. 부적절한 인가
	ㄷ. 중요한 자원에 대한 잘못된 권한 설정
	ㄹ. 취약한 암호화 알고리즘 사용
	ㅁ. 중요정보 평문 저장 및 전송
	ㅂ. 하드코딩된 비밀번호
	*하드코딩
	: 데이터를 코드 내부에 직접 입력하는 프로그래밍 방식


코드 오류
: 소프트웨어 구현 단계에서 개발자들이 코딩 중 실수하기 쉬운 형 변환(Type), 자원 반환 등의 오류를
  예방하기 위한 보안 점검 항목

코드 오류의 종류
	ㄱ. 널 포인터(Null Pointer) 역참조
	: 널 포인터가 가리키는 메모리에 어떠한 값을 저장할 때 발생하는 보안 약점
	*널 포인터
	: Null은 값이 없음을 의미하는데 포인터는 메모리의 위치를 가리키는 요소입니다.
	  널 포인터는 포인터에 널이 지정되어 어떠한 곳도 가리키지 못하는 상태를 말합니다.
		- 대부분의 운영체제에서 널 포인터는 메모리의 첫 주소를 가리키며,
		  해당 주소를 참조할 경우 소프트웨어가 비정상적으로 종료될 수 있음
		- 공격자가 널 포인터 역참조로 발생하는 예외 상황을 악용할 수 있음
		[설명]
		스택 가드(Stack Guard)
		: 널 포인터 역참조와 같이 주소가 지정되는 스택에서 발생하는 보안 약점을 막는 기술로
		  메모리상에서 프로그램의 복귀 주소와 변수 사이에 특정 값을 저장해 두었다가 그 값이
		  변경되었을 경우 오버플로우 상태로 가정하여 프로그램 실행을 중단하는 기술을 말함

	ㄴ. 부적절한 자원 해제
	: 자원을 반환하는 코드를 누락하거나 프로그램 오류로 할당된 자원을 반환하지 못했을 때
	  발생하는 보안 약점
	ㄷ. 해제된 자원 사용
	: 이미 사용이 종료되어 반환된 메모리를 참조하는 경우 발생하는 보안 약점
	ㄹ. 초기화되지 않은 변수 사용
	: 변수 선언 후 값이 부여되지 않은 변수를 사용할 때 발생하는 보안 약점


캡슐화
: 정보 은닉이 필요한 중요한 데이터와 기능을 불충분하게 캡슐화하거나 잘 못 사용함으로써
  발생할 수 있는 문제를 예방하기 위한 보안 점검 항목
	ㄱ. 잘못된 세션에 의한 정보 노출
	: 다중 스레드 환경에서 멤버 변수에 정보를 저장할 때 발생하는 보안 약점
	ㄴ. 제거되지 않고 남은 디버그 코드
	: 개발 중에 버그 수정이나 결과값 확인을 위해 남겨 놨던 코드를 지우지 않고
	  남겨둬서 발생하는 보안 약점
	ㄷ. 시스템 데이터 정보 노출
	: 시스템의 내부 정보를 시스템 메시지 등을 통해 외부로 출력하도록 했을 시
	  발생하는 보안 약점
	ㄹ. Public 메소드로부터 반환된 Private 배열
	: 선언된 클래스 내에서만 접근이 가능한 Private 배열을 모든 클래스에서 접근이 가능한
	  Public 메소드에서 반환할 때 발생하는 보안 약점
	[설명] - 접근 지정자(접근 제어자) 란?
	접근 지정자는 프로그래밍 언어에서 특정 개체를 선언할 때 외부로부터의 접근을
	제한하기 위해 사용되는 예약어입니다.

	허용 범위		public	protected		default		private
	클래스 내부	  O	  O		  O		  O
	동일 패키지	  O	  O		  O		  X
	하위 패키지	  O	  O		  X		  X
	다른 패키지	  O	  X		  X		  X

	Private의 경우에는 클래스 내부에서만 사용하실 수 있습니다.
	ㅁ. Private 배열에 Public 데이터 할당
	: Private 배열에 Public 으로 선언된 데이터 또는 메소드의 파라미터를 저장할 때
	  발생하는 보안 약점


암호 알고리즘
: 패스워드, 주민번호, 은행계좌와 같은 중요정보를 보호하기 위해 평문을 암호화된 문장으로
  만드는 절차 또는 방법을 의미
	- 해시를 사용하는 단방향 암호화 방식과 개인키 및 공개키로 분류되는
	  양방향 암호화 방식이 존재함

			암호화 방식
		단방향			양방향
		해시		공개키		개인키
						Stream 방식
						Block 방식

개인키 암호화 기법(Private Key Encryption)
: 동일한 키로 데이터를 암호화하고 복호화하는 방식
	- 데이터베이스 사용자는 평문의 정보를 암호화 알고리즘과 개인키를 이용하여
	  암호문으로 바꾸어 저장시켜 놓으면 사용자는 그 데이터베이스에 접근하기 위해
	  복호화 알고리즘과 개인키를 사용하여 다시 평문의 정보로 바꾸어 이용하는 방법
	- 암호화/복호화 속도가 빠르며, 알고리즘이 단순하고 공개키 암호화 기법보다 파일의
	  크기가 작으나, 사용자의 증가에 따라 관리해야 할 키의 수가 상대적으로 많아짐
	- Block 암호화 방식 : DES, SEED, AES, ARIA
	- Stream 암호화 방식 : LFSR, RC4

공개키 암호화 기법(Public Key Encryption)
: 데이터를 암호화하는 공개키는 데이터베이스 사용자에게 공개하고
  복호화하는 비밀키는 관리자가 관리하는 방식
	- 평문의 정보를 암호화 알고리즘과 공개키를 이용하여 암호문으로 바꾸어 저장시켜 놓고,
	  이를 복호화하기 위해서는 비밀키와 복호화 알고리즘에 권한이 있는 사용자만이
	  복호화 알고리즘과 비밀키를 이용하여 다시 평문의 정보로 변환 가능
	- 키의 분배가 용이하고 관리해야 할 개수가 적으나, 암호화/복호화 속도가 느리며,
	  알고리즘이 복잡하고, 개인키 암호화 기법보다 파일의 크기가 크다

양방향 암호화 알고리즘 종류와 특징
ㄱ. SEED
: 블록 크기는 128비트, 키의 길이에 따라 128, 256로 분류, 한국인터넷진흥원에서 개발한
  블록 암호화 알고리즘
ㄴ. ARIA(Academy Research Institute Agency)
: 블록 크기는 128비트, 키의 길이에 따라 128, 192, 256로 분류
	- ARIA는 학계, 연구기관, 정부의 영문 앞 글자로 구성되어 있으며
	  국가정보원과 산학협회가 개발한 블록 암호화 알고리즘
ㄷ. DES(Data Encryption Standard)
: 블록 크기는 64비트, 키의 길이 56비트로 1975년 미국 NBS에서 발표한 개인키 암호화 알고리즘
ㄹ. AES(Advanced Encryption Standard)
: 블록 크기는 128비트, 키의 길이에 따라 128, 192, 256로 분류하며
  2001년 미국 표준 기술 연구소에서 발표한 개인키 암호화 알고리즘
ㅁ. RSA(Rivest Shamir Adleman)
: 1978년 MIT의 라이베스트, 샤미르, 애들먼에 의해 제안된 공개키 암호화 알고리즘으로
  큰 숫자를 소인수 분해하기 어렵다는 것에 기반하여 만들어진 알고리즘
	- 공개키와 비밀키를 사용하는데, 여기서서의 키란 메시지를 열고 잠그는 상수를 의미함

해시(Hash)
: 임의의 길이의 입력 데이터나 메시지를 고정된 길이의 값이나 키로 변환하는 것을 의미
	- 해시 알고리즘을 해시 함수라고 부르며, 해시 함수로 변환된 값이나 키를
	  해시값 또는 해시키라고 함
	- 복호화가 거의 불가능한 일방향 함수에 해당함
	- 무결성 검증을 위해 사용될 뿐만 아니라 다양한 정보보호 분야에서 활용됨
	- 종류로는 SHA 시리즈, MD5, N-NASH, SNEFRU 등이 있음

	SHA 시리즈	- 미국 국가 안보국이 처음 설계했으며 미국
			  국립표준기술연구소에 의해 발표됨

	MD5		- 1991년 R.Rivest가 MD4를 대체하기 위해 고안한 암호화 해시 함수
			- 블록 크기는 512비트이며, 키 길이는 128비트이다.

	N-NASH		- 1989년 일본의 전신전화주식회사에서 발표한 암호화 해시 함수
			- 블록 크기와 키 길이 모두 128비트이다.

	SNEFRU		- 1990년 R.C.Merkie가 발표한 해시 함수
			- 블록 크기는 512비트이며 키 길이에 따라 128과 256으로 구분된다.


서비스 거부 공격(Dos ::Denial of Sevice)
: 표적이 되는 서버의 자원을 고갈시킬 목적으로 다수의 공격자 또는 시스템에서 대량의 데이터를 한 곳의 서버에
  집중적으로 전송함으로써 표적이 되는 서버의 정상적인 기능을 방해하는 공격
	- 종류로는 Ping of Death, SMURFING, SYN Flooding, TearDrop, Land, DDos 등이 있음
		ㄱ. Ping of Death
		: Ping 명령 전송 시 패킷의 크기를 인터넷 프로토콜 허용 범위 이상으로 공격하여
		  공격 대상의 네트워크를 마비시키는 서비스 거부 방법
			- ICMP Ping 메시지가 전송되지 못하도록 방화벽에서 차단하는 기술이 개발되었음
		ㄴ. SMURFING(스머핑)
		: IP나 ICMP의 특성을 악용하여 엄청난 양의 데이터를 한 사이트에 집중적으로 보냄으로써
		  네트워크를 불능 상태로 만드는 공격 방법
			- 공격자는 송신 주소를 공격 대상지의 IP 주소로 위장하고 해당 네트워크 라우터의
			  브로드캐스트 주소를 수신지로 하여 패킷을 전송하면, 라우터의 브로드캐스트 주소로
			  수신된 패킷은 해당 네트워크 내의 모든 컴퓨터로 전송됨
			*브로드캐스트 주소
			: 네트워크의 특정 호스트를 대상으로 패킷을 전송하는 것이 아니라 네트워크 내의
			  전체 호스트를 대상으로 패킷을 전송할 때 사용하는 주소
		ㄷ. SYN Flooding
		: 공격자가 가상의 클라이언트로 위장하여 3-way-handshake 과정을 의도적으로 중단시킴으로써
		  공격 대상지인 서버가 대기상태에 놓여 정상적인 서비스를 수행하지 못하게 하는 공격 방법
		*3-way-handshake
		: 신뢰성 있는 연결을 위해 송신지와 수신지 간의 통신에 앞서 3단계에 걸친
		  확인 작업을 수행한 후 통신을 수행
		ㄹ. TearDrop
		: 데이터의 송수신 단계에서 전송되는 Fragment Offset 값을 변경시켜 패킷을 재조립할 때
		  오류로 인한 과부하를 발생시킴으로 시스템이 다운되도록 하는 공격 방법
		ㅁ. Land
		: 패킷 전송 시 송수신 IP 주소를 모두 공격 대상의 IP 주소로 하여 공격 대상에게 전송하여
		  무한히 자신에게 응답을 수행하게 되는 공격 방법
			- Land에 대비하기 위해 송신 IP 주소와 수신 IP 주소의 적절성을 검사
		ㅂ. DDos(Distributed Denial of Service ::분산 서비스 거부 공격)
		: 여러 곳에 분산된 공격 지점에서 한 곳의 서버에 대해 공격을 수행하는 공격 기법으로
		  네트워크에서 취약점이 있는 호스트들을 탐색한 후 호스트들에게 분산 서비스 공격 툴을
		  설치하여 에이전트로 만든 후 공격에 이용
			- 공격 범위 확대를 위해 일부 호스트에 다수의 에이전트를 관리할 수 있는
			  핸들러 프로그램을 설치하여 마스터로 지정한 후 공격에 이용하기도 함
			- 분산 서비스 공격 툴의 종류는 아래와 같음
				a. TrinOO
				: 초기 형태의 데몬으로 UDP Flooding 공격 수행
				b. TFN(Tribe Flooding Network)
				: UDP Flooding, TCP SYN Flood 공격, ICMP 응답 요청, 스머핑 공격 등 수행
				c. TFN2K
				: TFN의 확장판
				d. Stacheldraht
				: 이전의 툴들을 유지하면서 암호화된 통신을 수행하며 툴이 자동으로
				  업데이트되도록 설계

네트워크 침해 공격 관련 용어
ㄱ. 스미싱(Smishing)
: 문자 메시지를 이용해 사용자의 개인 신용 정보를 빼내는 수법
ㄴ. 스피어 피싱(Spear Phishing)
: 일반적인 이메일로 위장한 메일을 지속적으로 발송하여 메일의 링크나 첨부된 파일을 클릭하게
  유도하여 개인 정보를 탈취
ㄷ. APT(지능형 지속 위협 ::Advanced Persistent Threats)
: 조직적으로 특정 기업이나 조직 네트워크에 침투해 활동 거점을 마련한 뒤 때를 기다리면서
  보안을 무력화시키고 정보를 수집한 다음 외부로 빼돌리는 형태의 공격
ㄹ. 무작위 대입 공격(Brute Force Attack)
: 암호화된 문서의 암호키를 찾기 위해 무작위로 값을 대입하여 공격하는 방식
ㅁ. 큐싱(Qshing)
: QR코드를 통해 악성 앱을 다운받게 하여 개인 정보를 탈취하는 공격 방식
ㅂ. Ping Flood
: 특정 사이트에 매우 많은 ICMP 메시지를 보내 이에 대한 응답으로 시스템 자원을 모두 사용하게 해
  시스템이 정상적으로 동작하지 못하도록 하는 공격 방법
ㅅ. Evil Twin Attack
: 실제 존재하는 동일한 이름의 무선 WiFi 신호를 송출하여 로그온한 사람들의
  계정 정보나 신용 정보 등을 빼내는 기법


정보 보안 침해 공격 관련 용어
ㄱ. 좀비 PC(Zombie PC)
: 악성코드에 감염되어 다른 프로그램이나 컴퓨터를 조종하도록 만들어진 컴퓨터
ㄴ. C&C 서버
: 해커가 원격지에서 감염된 좀비 PC에 명령을 내리고 악성코드를 제어하기 위한
  용도로 사용하는 서버
ㄷ. 봇넷(Botnet)
: 악성 프로그램에 감염된 컴퓨터들이 네트워크로 연결된 형태
ㄹ. 웜(Worm)
: 네트워크를 통해 연속적으로 자신을 복사하여 시스템의 부하를 높여 시스템을 다운시키는 바이러스의
  일정으로 분산 서비스 거부공격, 버퍼 오버플로 공격, 슬래머 등이 웜 공격의 한 형태임
ㅁ. 제로 데이 공격(Zero Day Attack)
: 보안 취약점이 발견됐을 때 공표되기도 전에 해당 취약점을 통해 신속하게 이루어지는 보안 공격
ㅂ. 키로거 공격(Key Logger Attack)
: 사용자의 키보드 움직임을 탐지하여 개인 정보를 몰래 빼가는 공격
ㅅ. 랜섬웨어(Ransomware)
: 사용자의 컴퓨터에 잠입해 파일을 암호화하여 사용자가 열지 못하게 하는 프로그램
ㅇ. 백도어(Back Door)
: 액세스 편의를 위해 시스템 보안을 제거하여 만들어 놓은 비밀 통로를 통해 범죄에 악용되는 형태
ㅈ. 트로이 목마(Trojan Horse)
: 정상적인 기능을 하는 프로그램인 척 프로그램에 숨어 있다가
  해당 프로그램이 동작될 때 활성화되어 부작용을 일으키는 형태


보안 솔루션
: 접근 통제, 침입 차단 및 탐지 등을 수행하여 외부로부터의 불법적인 침입을 막는 기술 및 시스템
	ㄱ. 방화벽
	: 기업이나 조직 내부의 네트워크와 인터넷 간에 전송되는 정보를 선별하여
	  수용, 거부, 수정하는 기능을 가진 침입 차단 시스템
	ㄴ. 침입 탐지 시스템(IDS ::Intrusion Detection System)
	: 컴퓨터 시스템의 비정상적인 행위를 실시간으로 탐지하는 시스템
		- 문제 발생 시 모든 내외부 정보의 흐름을 실시간으로 차단하기 위해
		  해커 침입 패턴에 대한 추적과 유해 정보 감시가 필요
		- 방화벽과 같은 침입 차단 시스템만으로는 내부 사용자의 불법적인
		  행동과 외부 해킹에 100% 완벽하게 대처할 수 없음
		- 오용 탐지와 이상 탐지 등의 감지가 될 수 있음
	ㄷ. 침입 방지 시스템(IPS ::Instrusion Prevention System)
	: 방화벽과 침입 탐지 시스템을 결합한 것
		- 비정상적인 트래픽을 능동적으로 차단하고 격리하는 방어 조치를
		  취하는 보안 솔루션
	ㄹ. 데이터 유출 방지(DLP ::Data Leakage Prevention)
	: 내부 정보의 외부 유출을 방지하는 보안 솔루션
		- 내부 PC와 네트워크상의 모든 정보를 검색하고 사용자 행위를 탐지,
		  통제해 외부로의 유출을 사전에 방지
	ㅁ. 웹 방화벽(Web Firewall)
	: 일반 방화벽이 탐지하지 못하는 SQL 삽입 공격, XSS 등의 웹 기반 공격을 방어할
	  목적으로 만들어진 웹 서버에 특화된 방화벽
	ㅂ. VPN(가상 사설 통신망 ::Virtual Private Network)
	: 인터넷 등 통신 사업자의 공중 네트워크와 암호화 기술을 이용하여 사용자가 마치
	  자신의 전용 회선을 사용하는 것처럼 해주는 보안 솔루션
	ㅅ. NAC(Network Access Control)
	: 네트워크에 접속하는 내부 PC의 MAC 주소를 IP 관리 시스템에 등록 후 일관된
	  보안 관리 기능을 제공하는 보안 솔루션
	ㅇ. SSH(Secure Shell)
	: 다른 컴퓨터에 로그인, 원격 명령 실행, 파일 복사등을 수행할 수 있도록
	  다양한 기능을 지원하는 프로토콜





















