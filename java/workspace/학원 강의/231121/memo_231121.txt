@라이브러리
클래스 100개를 파일별로 관리하기보다는 기능별로
압축파일로 생성해서 사용하는 방식이다.
일반적으로 JAR(압축파일) 클래스와 인터페이스의
바이트코드파일(.class)을 압축한다.

압축할 수 있는 방법
- 콘솔(명령) 프로그램 실행
- 이클립스 Build Path

@라이브러리 만드는 방법
1) 프로젝트 만들기 : my_lib
패키지1/패키지2 : A.class/B.class

2) 압축할 수 있는 폴더 만들기
src같은 depth < dist (jar파일 생성)

3) 새로운 프로젝트 만들기 > jar 압축 해제
my_application 프로젝트 만들기
src > app(패키지) > main.java (main method()호출 

4) main_method() 실행 : my_lib.jar
import해서 A.class B.class 메서드 출력
1)이클립스 해제 방식
File > Build Path > ConfigureBuildPath  > 라이브러리 > Add External JAR

2)콘솔창(cmd)에 명렁어로 해제하는 방식
my_application > app >  명령어 콘솔로 찍어서 출력
C:\Users\User\eclipse-workspace\my_application\bin>java -classpath C:\Users\User\eclipse-workspace\my_lib\dist\my_lib.jar;. app.main

@모듈화 방식
자바 9버전 부터 지원하는 방식이다.
모듈은 패키지 관리 기능까지 포함된 모든 패키지에
외부 프로그램에서 접근이 가능하지만
모듈은 은닉하여 접근할 수 없게 만들 수 있다.
패키지를 모두 사용할 필요가 없고
은닉할 패키지를 선택해서 구현할수 있다..

1) 모듈 기술자(module-info.java) 모듈간의 의존관계를 만든다.
모듈A(프로젝트1) -> 모듈B(프로젝트2) -> 모듈3(프로젝트3)

2) module-info.java 파일이 존재하면 모듈이라고 생각한다.
모듈도 라이브러리와 같이 배포하고 사용할 수 있다.

3) 대규모 응용프로그램은 기능별 모듈화 시켜서 개발시키고 있다.
재사용성과 유지보수 차원에서 모듈화 패킹이 필요하다.

- 프로젝트 방식

- Jar 파일 압축해제 방식

@예외처리
에러 : 하드웨어 고장으로 인해 응용프로그램이 실행 오류 발생
외부적인 상황으로 코드랑은 상관없이 고장이 생기는 환경
(개발자도 대체할 수 없다.)
- 인터럽트/입출력/메모리고장

예외 : 개발자의 잘못된 코딩으로 인해 발생하는 에러
예외가 발생하면 프로그램은 곧바로 종료된다.

1) 일반예외 : 컴파일러가 무조건 예외처리를 검사하는 방식
자바 컴파일러가 명시적으로 블록을 꼭 사용해서 요구하는 예외상황
(try-catch-finally) : 선택 X 무조건 처리

2) 실행예외 : 컴파일러가 예외처리 코드 여부를 검사하지 않는 방식
(try-catch-finally) : 선택
*예외처리 : 클래스로 구성되어 있다.
- NullPointerException : 객체 인스턴스를 생성했는데 메모리가 없는 경우
- NumberFormatException : 잘못된 형변환(정수/실수 단위로 달라진 부분)
- ArrayIndexOutofBoundsException : 배열의 범위를 초과해서 발생하는 경우

일반예외 > Exception > throwable 상속 받아 만들어진다.
실행예외 > RuntimeException > throwable 상속 받아 만들어진다.

@예외처리 문법
예외가 발생되었을 때 갑작스러운 종료를 막고자 내부에서 처리하는 코드
1) 예외 미처리
코드 진행 에러 발생 > JVM(자바가상머신) 예외 클래스 생성
> 예외 객체 발생 지점으로 호출 처리(try-catch) > 비정상 오류

2) 예외 처리
try{
	//에러가 발생할 가능성이 있는 지점
}catch(Exception e){
	//예외 처리 코드로 에러 로그를 심어놓는다.
	e.printstack();
}
finally{
	//항상 실행되는 코드
}

@실행 예외 소스 코드(컴파일러시 try-catch)
@일반 예외 소스 코드(컴파일러 시 무조건 try-catch)
- IOException : 입출력 에러 코드로 확인할 수 있다.

@다중 catch 사용하기
프로그램 처리 시 에러 발생이 여러 개인 경우
다중 catch문을 이용해서 예외별 예외처리코드를 다양하게 만들 수 있다.

@printStackTrace() getMessage()
 예외 클래스 인스턴스 발생한 예외의 정보가 담겨있다.

- printStackTrace()
예외 발생 당시에 호출 스택에 있었던 메서드의 정보와 예외메시지를 화면에 출력
- getMessage()
발생한 예외 클래스의 인스턴스에 저장된 메시지를 얻는다.

@예외 발생시키기
키워드(예약어) throw 사용해서 프로그래머 고의로 예외를 발생시키는 상황
해당 메서드를 사용하는 쪽에서 처리할 수 있게 미루는 방식
유지보수 부분과 호출하는 쪽에서 수월하게 처리하기 위해서 만든 방식

문제1 : 예외던지기 기본문제

문제2 : 예외던지기 교재369쪽 (호출한 곳에서 예외처리)






















