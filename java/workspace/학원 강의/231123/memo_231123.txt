@java.lang 패키지
자바 lang 패키지는 기본적인 클래스를 담고있고 import/상속
없이 클래스와 인터페이스를 사용할 수 있다.

1. Object : 자바 클래스의 최상위 클래스
자바 최상위 조상클래스 모든 클래스가 생성될 때 상속하지 않아도
자동으로 상속받게 된다.
클래스를 생성하면 Object 클래스가 여러 메서드를 오버라이드 할 수 있다.

1) equals() 메서드 : 동등한 객체 안에서 문자열을 비교한다.
2) hashCode() 메서드
 - System.identityHashCode()
3) toString() 메서드

2. String

1) 문자열의 리터럴을 지정
존재하는 문자열 리터럴이 있으면 새롭게 생성하지 않고
기존의 인스턴스를 재사용한다.
String str1 = "abc";
String str2 = "abc";

2) String 클래스 생성자를 사용
new 연산자를 통해 새로운 인스턴스를 생성한다.
String str1 = new String("abc");
String str2 = new String("abc");

3) 등가비교연산자(주소값) "==" 비교
문자열 리터럴 : 동일한 인스턴스를 사용하기 때문에 true
(문자열로 묶으니까 주소값이 동일하다.)
String 클래스의 생성자 : 서로 다른 인스턴스를 사용하기 때문에 false
참고) equals()는 String 클래스에서 오버라이딩되었기 때문에 true 반환

4) String 클래스 : (리터럴/공백)
  1. 문자열 리터럴(String str1 = "abc";)은 클래스 파일이 메모리에
올라갈 때 JVM있는 상수 저장소(constant pool)에 저장된다.
  2. 문자열 리터럴은 한번 생성하고 수정할 수 없으니 같은 문자열 리터럴은
공유해서 사용한다.
-공백(빈문자열:empty String)
  1. 내용이 없는 문자열
  2. 문자열이 초기화(null -> 빈문자열 / 유니코드 -> 공백)

3. StringBuffer / StringBuilder
- Stringbuffer / Stringbuilder
  1) String 클래스와 달리 내용을 변경할 수 있다.
(String 새로운 배열을 생성 -> 배열복사 - > 새로운 배열주소를 참조 변수 저장)
  2) 내부적으로 문자열을 편집을 위한 버퍼(buffer)를 가지고 있어
버퍼값을 늘려서 사용할 수 있다.(버퍼의 기본사이즈:16 -> 필요할 때마다 지정)
  3) append() 메서드를 이용하여 글자를 계속 늘려서 추가 저장할 수 있다.
  4) 객체를 각자 생성해도 같은 값일 경우 같은 주소가 대입된다.

- StringBuffer / StringBuilder 차이점
  1) StringBuffe는 스레드 환경에 안전하도록 동기화가 되어있다.
  2) 스레드 환경이 아닐 경우 StringBuilder 성능이 좋다.

4. Math (수학 공식)

5. Wrapper 클래스
1) 기본 자료형(int/long/double/float..)을 데이터 객체형으로 표현한다.
8개의 기본형을 객체로 다뤄야할 때 사용하는 클래스이다.
2) 매개변수로 객체를 요구할 때 기본형 값이 아닌(형변환) 참조형으로
저장할 때 사용하거나 객체 간의 비교를 해야할 때 사용한다.
3) 자바 SE9버전 이후에는 생성자가 폐기
작은 메모리와 빠른 속도의 메서드를 이용할 때 사용한다.

- 오토 박싱/언박싱
박싱 : 기본 데이터 타입 -> Wrapper 클래스 변환한다.
언박싱 : Wrapper 클래스 -> 기본 데이터 타입으로 변환한다.

6. Number

7. java.util 패키지 (date클래스/Calender:날짜와 시간)














