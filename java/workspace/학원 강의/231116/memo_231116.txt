@내부 클래스

클래스안에 만들어진 다른 클래스를 중첩 클래스라고 한다.
독립적으로 선언하는 것이 독립적으로 좋으나 특정 클래스 관계를
맺을 경우 중첩클래스로 선언하는 것이 유지보수에 좋다.
코드의 복잡성을 감추기 위해서 멤버를 쉬벡 사용할 수 있다.

외부클래스 : 자동차
내부클래스 : 엔진/기어/방향지시등/드라이브

@내부 클래스 종류
1) 멤버클래스 / 로컬클래스
 - 인스턴스 멤버 클래스 : 외부 클래스를 객체로 만들고, 내부 클래스를 허용한다.
[접근제한자] class A { //외부클래스 : 자동차
	[접근제한자] class B { //내부클래스 : 엔진
	}
}

 - 정적 멤버 클래스 : 외부 클래스를 객체로 만들 필요가 없고, 내부 클래스를 허용한다.
A라는 객체를 생성하지 않아도 B라는 객체를 생성할 수 있다.
[접근제한자] class A {
	[접근제한자] static class B {
	}
}
내부클래스가 static 이면 외부 클래스 인스턴스 멤버변수 사용 불가
 -> 내부 클래스 객체를 직접적으로 생성해서 내부 클래스 메서드를 바로 호출 가능

 - 로컬 클래스 : 생성자/메서드를 통해서만 생성될 수 있다.
(local class : 내부 안에서 실행된다는 것임)
생성자나 메서드 내부 안에서 실행될 때만 B객체를 생성한다.
class A{ //외부클래스
	A(){ //외부클래스 생성자 호출가능
		class B{}
		B b = new B(); //생성자 객체 생성 호출 가능
	}
	void method(){ //외부클래스 메서드
		class B{}
		B b = new B(); //메서드 객체 생성 호출 가능
	}
}
1. 메서드나 생성자가 호출이 종료되면 지역클래스 인스턴스도 종료된다
2. 메서드 매개변수값이나 인스턴스 지역변수일 경우 내부클래스안에 들어갈 때
  final이라는 Reading만 되는 변수값으로 들어간다.
  jdk17버전이후로는 final이 생략된경우가 있어서 확인을 해봐야한다.

@내부클래스 접근 제한
1. 외부클래스 멤버 접근 제한
중첩클래스는 외부클래스와 긴밀한 관계를 맺는다.
외부클래스 멤버(필드, 메서드)에 접근할 수 있다.
중첩클래스가 어떻게 선언되었느냐에 따라 접근 방법이 달라진다.

인스턴스 멤버 클래스 -> 외부클래스 모든 필드와 메서드
(정적/인스턴스변수)

정적 멤버 클래스 -> 외부클래스의 정적 필드와 정적메서드
(외부클래스 : 인스턴스멤버 허용X)

2. 멤버 클래스 접근 제한자(private)
인스턴스 클래스를 private 선언할 경우 getter를 통해서 클래스를 얻도록 할 수 있고
내부클래스 접근제한자(private)를 통해 제한가능하다.

@중첩 인터페이스
안드로이드 버튼 클릭할 때 이벤트를 인터페이스로 만들 수 있다.
외부클래스와 긴밀한 관계를 맺는 구현 객체를 만들기 위해 선언된다.(버튼 인터페이스)

구현방법
class A{ //인터페이스 접근하고 객체를 다양하게 접근하게 해서
	구현부를 다르게 만든다//
	[접근제한자] interface B{ //중첩 인터페이스
	//상수 필드
	//추상 메서드
	//디폴트 메서드
	//정적 메서드
	}
}

필드에 다형성을 알 수 있고 버튼을 어떤 객체를 주입할지 알지 못하는 상황에서
객체를 주입할 때 개발자가 주입할 수 있는 클래스를 만들어야한다.

@익명클래스























