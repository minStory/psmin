SBS아카데미컴퓨터아트학원 수신자 모두 7:25 PM
# FrontController 패턴(방식)
  - FrontController 패턴은 지휘자를 만드는 것임.
  
  - 여러 클라이언트들의 요청이 있게 되면 해당 하는 요청마다 
    컨트롤러가 있다고 생각을 한다면, 요청을 보낼 때마다 
    "특정한 작업(공통적인 작업)을 하는 것이 필수적" 이라면 요청이 들어올 때마다
    해당 특정한 작업을 실어서 보내야 하는데 이렇게 코드를 작성하다
    보면 코드의 중복이 생기고, 해당 작업을 누락을 한다면 오류가
    생길 수 있게 됨.
     
  - 이러한 까닭에 앞에서 언급한 지휘자가 필요함. 요청을 처리하는 
    지휘자는 해당 작업을 가지고 있고 해당 작업을 처리한 뒤에 요청에
    맞는 컨트롤러에게 전달해 주는 역할을 하게 됨. 이것이 바로 
    FrontController 패턴임.
     
  - 기능이 많아지면 Servlet 갯수가 많아지고 길어지는 문제가
    발생하기 때문에 모든 요청을 한 곳에 받아오고, 하나의 컨트롤러로 
    다시 보내 주는 패턴을 이용.
        
  - MVC 패턴의 메인으로 "모든 요청을 하나의 대표 컨트롤러가 처리하는
    방식" 이다. 이것은 유지보수성이 매우 뛰어나고 또 수 많은 컨트롤러의
    응답에 계속적으로 객체를 생성하지 않아 자원 활용에도 아주 좋음.
  - 각각의 컨트롤러에서 클라이언트의 요청을 받는 것이 아니라 
    FrontController 서블릿 하나로 클라이언트의 요청을 받음.
    FrontController 가 요청에 맞는 컨트롤러를 찾아서 호출함.
    입구가 하나이므로 공통적인 처리 기능 사용이 가능함.
        
  - FrontController는 요청 객체를 처리할 수 있는 비지니스 로직을
    가진 Controller를 호출함.
    그 다음 FrontController는 Controller 의 비지니스 로직을
    수행할 메서드를 호출함. 이 때 비지니스 로직을 수행하는 메서드의
    이름이 Controller 마다 다르다면, FrontController에서
    일괄적으로 해당 메서드를 호출할 수 없게 됨.
        
  - 따라서 이와 같은 문제점을 해결하기 위해서 Controller는
    interface로 선언하여 각 Controller 의 비지니스 로직을
    수행하는 메서드는 동일한 이름의 메서드 명을 갖게 됨.