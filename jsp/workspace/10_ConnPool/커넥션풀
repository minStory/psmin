# JDBC와 DBCP의 차이점
  1) JDBC(Java DataBase Connectivity)
     - 자바와 데이터베이스 간의 연결.
     - 데이터베이스에 연결하려면 드라이버(driver)를  로딩하고,
       커넥션(Connection) 객체를 받아와야 함.
     - JDBC 방식을 사용하면 사용자가 요청할 때마다 매번 드라이버를 
       로딩하고, 데이터베이스에서 커넥션 객체를 생성하여 연결하고
       사용 후 종료하기 때문에 매우 비효율적이고 데이터베이스에
       부하가 많이 생기는 단점이 발생함.
     - 커넥션을 생성하고 사용 후 닫는데 시간이 소요되기 때문에
       동시 접속자가 많은 웹 사이트에서는 전체적인 성능이 낮아짐.
     - 다시 말하자면 빈번한 연결과 해제는 시스템 성능에 큰 영향을 미침.
       
  2) DBCP(DataBase Connection Pool)
     - 데이터베이스와 Connection을 맺고 있는 객체를 관리하기 위한
       방법을 말함.
     - JDBC의 단점을 극복하기 위해서 사용됨.
     - 웹 컨테이너(톰켓 서버)가 실행되면서 커넥션(Connection) 
       객체를 미리 풀(pool)에 만들어 놓음.
     - 데이터베이스와 연결된 커넥션(Connection)을 미리 생성해서 
       풀(pool) 속에 저장해 두고 있다가 필요할 때마다 가져다가 
       사용하고 반납함.
     - 미리 생성해 두기 때문에 데이터베이스의 부하를 줄여주고, 
       유동적으로 연결을 관리할 수 있음.
     - 커넥션 풀을 사용하면 커넥션을 생성하고 닫는데 필요한 시간이 
       소모되지 않기 때문에 그만큼 애플리케이션의 실행 속도가 빨라짐.
     - 또한 한 번에 생성될 수 있는 커넥션 수를 제어하기 때문에 동시
       접속자 수가 몰려도 웹 애플리케이션이 쉽게 다운되지 않음.
     - 따라서 커넥션 풀을 사용하면 전체적인 웹 애플리케이션의 성능과
       처리량이 향상되므로 많은 웹 애플리케이션이 커넥션 풀을 기본으로
       사용하고 있음.
       
     ※ javax.sql 확장 패키지
       - javax.sql 패키지는 java.sql 패키지의 기능을 보조하기 위해
         만든 확장 패키지임.
       - 서버 쪽 데이터 소스에 대한 접근을 쉽게 하고, 좀 더 다양한
         방법으로 데이터를 다룰 수 있는 API를 제공함.
       - javax.sql 패키지가 제공하는 주요 기능.
         * DriverManager를 대체할 수 있는 DataSource 인터페이스 제공.
         * Connection 및 PreparedStatement 객체의 풀링
         * 분산 트랜잭션 처리
         등등 
       

# JNDI(Java Naming Directory Interface)
  - 커넥션 풀에 접근하려면 JNDI 서비스를 이용해야 함. JNDI는 서버에서
    관리하고 있는 리소스에 대한 정보를 알고 있는 특정한 리소스를 찾아서
    사용할 수 있도록 객체를 반환해 주는 역할을 함.
  - 디렉토리 서비스에 접근하는데 필요한 API이며, 이 API를 이용하여
    서버의 자원을 찾을 수 있음.
  - 자원이라 함은 데이터베이스 서버 등을 의미하는데 이런 다른 시스템과
    연결을 제공하는 객체임.
  - 자원을 서버에 등록할 때에는 고유한 JNDI 이름을 붙여서 사용을 함.
  - 톰켓 서버에서 이 자원을 관리하는 가상의 디렉토리는 
    "java:comp/env" 라는 디렉토리임. 해당 디렉토리에 고유한 
    JNDI 이름을 뒤에 붙여서 해당 자원을 찾게 됨. 찾을 때는 lookup() 
    이라는 메서드를 이용하여 자원을 찾게 되고, 찾은 객체의 타입은 
    Object 타입임. 따라서 원래 리소스 타입으로 형변환을 해 주면 됨.

# WAS의 JNDI를 통해서 커넥션 풀을 사용하는 절차.
  1) WAS(톰캣)가 시작할 때 context.xml에 설정한 대로 커넥션 풀을 생성.
  2) DAO 코드에서 JNDI로 부터 데이터 소스 객체를 얻어옴.
  3) 데이터 소스로부터 커넥션 객체를 가져옴.
  4) DB 작업을 수행함.
  5) 모든 작업이 끝나면 커넥션 객체를 풀로 반환함.     
    
# 커넥션 풀(Connection Pool) 연결 방법
  1) Context 객체를 생성한다.
  2) lookup() 메서드를 이용하여 매칭되는 커넥션을 찾는다.
  3) DataSource.getConnection() 메서드를 이용하여 커넥션을 
     확보한다.
  
  
# 커넥션 풀을 사용하기 위해서 필요한 라이브러리
  - commons-connection-3.2.1.jar
  - commons-dbcp-1.4.jar
  - commons-pool-1.6.jar