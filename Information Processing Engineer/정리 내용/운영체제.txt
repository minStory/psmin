01 운영체제

기억장치
: 데이터, 프로그램, 연산의 결과를 일시적 또는 영구적으로 저장하는 장치

기억장치의 종류
	1) 레지스터 : 중앙처리장치 내부에 존재하는 기억장치
	2) 캐시 메모리 : 중앙처리장치가 주기억장치에 접근할 때 속도 차이를 줄이기 위해 사용
	3) 주기억장치 : 중앙처리가 직접 데이터를 읽고 쓸 수 있는 장치
		- ROM(Read Only Memory) : 읽기 전용 메모리, 비휘발성 메모리
		- RAM(Random Access Memory) : 읽고 쓰기 가능, 휘발성 메모리
			ㄱ. SRAM : 전원 공급 중에 내용이 사라지지 않음
			ㄴ. DRAM : 일반적인 주기억장치, 일정 시간이 지나면 내용이 사라짐
	4) 보조기억장치 : 접근시간은 느리지만 기억 용량이 크다
	5) 연관 메모리 : 주소에 의해 접근하지 않고, 기억된 내용을 이용하여 접근하는 기억장치
			빠른 접근 용도

시스템 소프트웨어 ::필요에 의해 설치
: 응용 소프트웨어를 실행하기 위한 플랫폼 제공
	- 로더 : 프로그램을 메모리에 적재하고 배치주소를 옮기는 프로그램
	- 링커 : 목적파일을 실행파일로 변환
	- 유틸리티 : 소프트웨어 관리에 도움을 주는 프로그램
	- 번역기(컴파일러, 어셈블러) : 특정 언어 문서 -> 다른 프로그래밍 언어 문서
	- 장치 드라이버 : 장치를 제어하기 위한 프로그램
	- 운영체제 : 하드웨어 관리, 컴퓨터들이 대화할 수 있도록 도와주는 프로그램

시스템 소프트웨어의 구성
	1) 제어 프로그램
		- 감시 프로그램 : 시스템 전체의 작동 상태를 감시/감독하는 프로그램
		- 작업관리 프로그램 : 스케줄 및 시스템 자원 할당 담당
		- 데이터 관리 프로그램 : 기억장치 간 자료전송, 파일 조작 및 처리,
					입출력 자료와 프로그램 간 논리적 연결 처리

운영체제
: 하드웨어 제어, 응용프로그램 실행 등 컴퓨터 내부 동작을 관리하는 소프트웨어

운영체제 운용 기법
	- 일괄 처리 시스템 : 여러 작업을 한 번에 묶어서 처리
	- 실시간 처리 시스템 : 요청한 실행을 즉각 실행하는 기법
	- 다중 프로그래밍 시스템 : 하나의 CPU지만 동시에 여러 프로그램이 실행되는 것처럼 보인다
	- 시분할 시스템 : 타임슬라이스, 일정 작업 시간 동안 작업 실행
	- 다중 처리 시스템 : 여러개의 CPU를 통하여 동시에 여러 개의 작업을 처리(4코어, 8코어)
	- 다중 모드 시스템 : 처리 시스템을 모두 혼용하여 사용
	- 분산 처리 시스템 : 둘 이상의 독립된 시스템이 통신으로 연결되고 상호작용

운영체제의 종류
	1) 윈도우(Windows)
		- MS-DOS의 멀티태스킹 기능과 GUI 환경 제공
	2) 리눅스(Linux)
		- 1991년 리누스 토발즈에 의해 오픈소스로 개발된 유닉스 호환 OS
	3) 유닉스(Unix)
		- 어셈블리 언어 10%, C언어 90%
		- Unix 시스템의 구성
			ㄱ. 커널(Kernel) : UNIX의 핵심적인 부분, 주기억장치에 적재 후 상주
			ㄴ. 쉘(Shell) : 명령어 해석기 -> 커널에서 명령어 전달
		- Unix 파일 시스템의 구조
			ㄱ. 부트블록 : 부팅 시 필요한 코드 저장
			ㄴ. 슈퍼블록 : 전체 파일 시스템 정보 저장
			ㄷ. I-node 블록 : 파일이나 디렉터리의 모든 정보 저장
			ㄹ. 데이터 블록 : 파일의 데이터가 저장
		- 파일 디스크립터(FD, File Descriptor) :: 시스템이 자동으로 생성
			- 유닉스 시스템에서 프로세스가 파일들을 접근할 때 이용
		- POSIX : 이식 가능한 운영체제 인터페이스
	4) MacOS
		- 애플사가 개발한 유닉스 기반의 운영체제
		- 다른 컴퓨터에서 macOS를 구동 시키는 것을 해킨토시라고 한다

운영체제의 명령어

Linux, Unix 파일 접근 권한 관리
	1) 파일 확인 방법
		- Is -al 명령을 이용하여 파일의 상세정보 및 파일 접근 권한을 확인
	2) 필드별 의미
		- 2~4번 : 소유주(USER) 권한
		- 5~7번 : 그룹(GROUP) 권한
		- 8~10번 : 나머지(OTHER) 권한
	3) 권한별 값
		- R, 값 4, 읽기 권한
		- W, 값 2, 쓰기 권한
		- X, 값 1, 실행 권한
		- -, 값 0 , 권한 없음
	4) 권한 변경 
		- chmod 0751 file명
		- chmod 0775 file명
	5) umask(접근 권한 마스크)
		- 파일 기본권한 666, 디렉터리 기본권한 777
	6) chown(소유주 변경)
		- chown seongmin file명
		- 해당 파일의 소유주를 seongmin으로 변경

기억장치 관리 전략
: 한정된 주기억장치의 공간을 효율적으로 사용
	1) 반입(Fetch) 전략 : 데이터를 언제 주기억장치로 적재할 것인지를 결정
		- 요구 반입 : 참조를 요구할 때 적재하는 방법
		- 예상 반입 : 데이터를 미리 예상하여 적재시키는 방법
	2) 배치(Placement) 전략 : 데이터를 주기억장치의 어디에 위치시킬 것인지를 결정
		- 최초 적합(First Fit) : 빈 영역 중에서 첫 번째 분할 영역에 배치
		- 최적 적합(Best Fit) : 빈 영역 중에서 단편화가 가장 작은 분할 영역에 배치
		- 최악 적합(Worst Fit) : 빈 영역 중에서 단편화가 가장 큰 분할 영역에 배치
	3) 교체(Replacement) 전략
		- 이미 사용되고 있는 영역 중 어느 영역을 교체하여 사용할 것인지 결정
		- 종류 : FIFO, OPT, LRU, LFU, NUR, SCR 등

단편화
: 프로그램을 할당하고 반납하는 과정에서 발생하는 사용되지 않는 작은 조각 공간

단편화의 종류
	1) 내부 단편화
		- 주기억장치 공간이 프로그램보다 커서 사용 공간 할당 후 사용되지 않고 남은 공간
	2) 외부 단편화
		- 주기억장치 공간보다 프로그램이 커서 프로그램이 할당될 수 없어
		  사용되지 않고 남은 공간
단편화 해결 방법
	1) 통합(Coalescing) 기법
		- 인접해 있는 두 개의 빈 분할 공간을 하나로 통합
	2) 압축(Compaction) 기법
		- 분산되어 있는 단편화 공간들을 통합 -> 주소 재지정
	3) 재배치 기법(Relocation)
		- 압축 기법 후 주소를 새롭게 지정해주는 기법

가상기억장치
: 보조기억장치(하드디스크)의 일부를 주기억장치처럼 사용하는 것

블록 분할 방법
	1) 페이징 기법 ::고정 크기 분할
		- 가상기억장치를 모두 같은 크기의 블록으로 편성
		- 외부 단편화 X, 내부 단편화 O
	페이지 크기	기억장소 효율	단편화	입출력 시간	맵테이블
	      ↑		        ↓		    ↑	      ↓		     ↓
	      ↓		        ↑		    ↓	      ↑		     ↑
	2) 세그먼테이션 기법 ::가변 크기 분할
		- 가상기억장치를 서로 크기가 다른 논리적 단위인 세그먼트로 분할
		- 내부 단편화 X, 외부 단편화 O

가상기억장치 기타 관리사항

페이지 부재 ::Fault-결함
: 참조할 페이지가 주기억장치에 없는 현상

지역성(Locality)
: 주기억장치를 참조할 때 일부 페이지만 집중적으로 참조하는 성질
	- 시간 구역성(Temporal Locality) : 일정 시간 동안 집중적으로 액세스하는 현상
	- 공간 구역성(Spatial Locality) : 일정 위치의 페이지를 집중적으로 액세스하는 현상

워킹셋(Working Set) ::지역성과 연관
: 프로세스가 일정 시간 동안 자주 참조하는 페이지들의 집합

스래싱(Thrashing) ::페이지 부재와 연관
	- 프로세스의 처리 시간보다 페이지 교체에 소요되는 시간이 더 많아지는 현상

페이지 교체 알고리즘
	1) FIFO(First In First Out)
		- 가장 먼저 메모리에 적재된 페이지를 먼저 교체하는 기법
	2) OPT(Optimal replacement, 최적 교체) ::알수 없어서 사용 X
		- 앞으로 가장 사용되지 않을 페이지 교체
	3) LRU(Least Recently Used)
		- 최근에 가장 오랫동안 사용되지 않은 페이지를 교체
	4) LFU(Least Frequently Used)
		- 사용 빈도가 가장 적은 페이지를 교체
	5) NUR(Not Used Recently)
		- 참조비트와 변형비트를 이용해서 페이지 교체
	6) SCR(Second Chance Replacement)
		- FIFO기법의 단점을 보완한 기법

프로세스
: 컴퓨터에서 연속적으로 실행되고 있는 컴퓨터 프로그램

스레드(Thread)
: 프로세스 내에서 실행되는 흐름의 단위
	- 프로그램은 하나 이상의 프로세스를 가지고, 프로세스는 하나 이상의 스레드를 가진다

메모리상의 프로세스 영역
	- 코드 영역 : 프로그램의 소스코드가 저장되는 영역
	- 데이터 영역 : 전역변수와 정적변수가 할당되는 부분, 프로그램 종료 시 소멸
	- 스택 영역 : 지역변수가 할당되는 부분, 함수 호출이 완료되면 사라짐
	- 힙 영역 : 동적 할당 영역

프로세스 상태 전이
			        Dispatch
			     --------------->
	생성 ------------> 준비 <--------------- 실행 --------------> 종료
			       Time Run out
		       Wake Up↖		↙	
				대기

PCB(Process Control Block) ::자동 생성
	- 운영체제가 프로세스에 대한 정보를 저장해 놓는 공간

문맥 교환(Context Switching) ::PCB가 있기에 가능하다
	- 멀티태스킹(=멀티프로세싱)이 가능하게 해준다

프로세스 스케줄링
: 어떤 프로세스를 먼저 처리할지 순서를 정하는 것

스케줄링 기법
	1) 선점형 스케줄링(Preemptive)
		- 운영체제가 CPU를 강제로 뺏을 수 있는 방식
		- 종류 : Round Robin, SRT(Shortest Remaining Time),
			MLQ(Multi-Level Queue), MLFQ(Multi-Level Feedback Queue) 등
	2) 비선점형 스케줄링(Non-Preemptive)
		- 프로세스가 CPU를 점유하고 있다면 이를 빼앗을 수 없는 방식
		- 순서대로 처리되는 공정성 보장
		- 종류 : FCFS(First Come First Service), SJF(Shortest Job First), HRN, 우선순위, 기한부

기아현상과 에이징 기법
	- 기아현상 : 우선순위가 낮은 프로세스가 무한정 기다리는 현상
		ex) SJF, 우선순위, SRT, MLQ
	- 에이징 기법 : 기아현상 해결, 오랫동안 기다린 프로세스에게 우선순위를 높여주는 기법
		ex) HRN, MLFQ

스케줄링 알고리즘

선점형 기법
	1) Round Robin
		- 시간단위를 정해서 순서대로 CPU를 할당하는 방식
	2) SRT(Shortest Remaining Time)
		- SJF 기법을 선점 형태로 변경
		- CPU 점유시간이 가장 짧은 프로세스에 CPU를 먼저 할당하는 방식
	3) 다단계 큐(MLQ, Multi-Level Queue)
		- 프로세스를 그룹에 따라 각기 다른 준비 상태 큐를 사용하는 기법
	4) 다단계 피드백 큐(MLFQ, Multi-Level Feedback Queue)
		- FCFS 순서로 CPU를 할당받아 실행, 할당 시간이 끝나면 다음 단계의 큐로 이동
		- 단계가 내려갈수록 시간 할당량 증가, 가장 하위큐는 Round Robin 방식으로 운영

비선점형 기법
	1) FCFS(First Come First Service)
		- 먼저 도착한 프로세스를 먼저 처리
	2) SJF(Shortest Job First)
		- 실행 시간이 가장 짧은 프로세스에게 CPU를 할당하는 방식
	3) HRN(Highest Response ratio Next) ::대실실
		- SJF에서 우선순위가 낮은 프로세스의 불리함을 보완
		- 우선순위 = (대기시간 - 실행시간) / 실행시간
	4) 우선순위(Priority)
		- 프로세스마다 우선순위 부여
	5) 기한부(Deadline)
		- 프로세스에게 일정한 시간을 주어 그 시간 안에 완료하도록 하는 기법
		- 시간 내에 완료되지 못할 경우, 제거 혹은 처음부터 다시 실행되어야 한다

병행 프로세스
: 두 개 이상의 프로세스들이 동시에 존재하며 실행상태에 있는 것
	- 한정된 자원(CPU, 메모리 등)에 대한 사용 순서 등 여러 문제 발생

병행 프로세스 문제 해결책
	1) 임계구역(Critical Section)
		- 한 순간에는 반드시 하나의 프로세스만 사용되도록 지정한 영역
	2) 상호 배제(Mutual Exclusion)
		- 하나의 프로세스가 메모리를 사용하고 있을 때,
		  다른 프로세스들이 사용하지 못하도록 배제시키는 제어 기법
			ㄱ. 데커의 알고리즘
			ㄴ. 피터슨의 알고리즘
			ㄷ. 다익스트라 알고리즘
			ㄹ. 램포트의 베이커리 알고리즘
	3) 동기화 기법
		- 하나의 자원에 대한 처리 권한을 주거나 순서를 조정해주는 기법
			ㄱ. 세마포어(Semaphore)
				- 제어 신호를 전달하여 순서대로 작업
			ㄴ. 모니터(Monitor)
				- 프로그래밍 언어 수준에서 동시성을 제어

교착상태(Dead Lock)
: 둘 이상의 프로세스들이 자원을 점유한 상태에서 서로 다른 프로세스가 점유하고 있는
  자원을 요구하며 무한정 기다리는 현상

교착상태 발생 조건 ::상.점.완(환).비
	1) 상호배제(Mutual Exclusion)
		- 한 번에 한 개의 프로세스만이 공유 자원을 사용할 수 있어야 함
	2) 점유와 대기(Hold & Wait)
		- 자원을 점유하고 있으면서 다른 프로세스에 할당되어 있는 자원을 추가로 요구
	3) 비선점(Nonpreemption)
		- 프로세스에 할당된 자원은 사용이 끝날 때까지 강제로 빼앗을 수 없음
	4) 환형대기(Circular Wait)
		- 각 프로세스가 순차적으로 다음 프로세스가 요구하고 있는 자원을 가진 상태

디스크 스케줄링
: 데이터를 액세스하기 위해 디스크 헤드를 움직이는 경로를 결정하는 기법

디스크 스케줄링 종류
	1) FCFS 스케줄링(First Come First Service)
		- 요청이 들어온 순서대로 처리
	2) SSTF(Shortest Seek Time First)
		- 현재 헤드에서 가장 가까운 트랙의 요청을 먼저 처리
	3) SCAN ::0~200이면 0과 200을 찍고 방향 전환
		- 헤드의 진행방향에 있는 요청을 처리하고,
		  다시 반대방향으로 틀어 반대방향의 요청을 처리
		- 진행 과정에서 요청이 들어오면 해당 요청도 처리
	4) C-SCAN
		- 항상 한쪽 방향에서 반대방향으로 진행하며 요청을 처리
		- 바깥쪽에서 안쪽으로 처리
		- 진행 과정에서 요청이 들어오면 해당 요청은 처리하지 않는다
	5) LOOK ::마지막 요청까지만 찍고 방향 전환
		- SCAN기법을 기초로 사용, 진행 방향의 마지막 요청 처리 후 반대방향으로 처리
	6) C-LOOK
		- C-SCAN기법을 기초로 사용, 진행 방향의 마지막 요청 처리 후 반대방향으로 처리
	7) N-STEP SCAN
		- 처리 과정중에 들어오는 것들은 이후로 모아서 반대방향으로 진행할 때 처리
	8) 에션바흐 기법
		- 부하가 매우 큰 항공 예약 시스템을 위해 개발

환경변수
: 프로세스가 컴퓨터에서 동작하는 방식에 영향을 미치는 동적인 값들의 모임

UNIX/Linux 환경변수
	- env, set, printenv : 값 보기
	- export : 전역변수로 설정

Windows 환경변수
	- set 명령

로그
: 시스템의 모든 기록을 담고 있는 데이터

리눅스 로그 종류
	- messages : 시스템 로그 파일
	- secure : 보안인증 로그파일
	- maillog : 메일 로그 파일
	- xferlog : ftp 로그 파일
	- dmesg : 부팅 시의 로그 파일
	- wtmp : 전체 로그인 기록 ::world
	- utmp : 현재 사용자 로그인 기록 ::user
	- btmp : 로그인 실패 정보 기록 ::back
	- lastlog : 가장 최근 로그인 기록 ::last

스토리지(Storage)
: 저장소의 역할을 수행하는 부품

스토리지 종류
	1) DAS(Direct Attachted Storage)
		- 직접 꽂아서 사용하는 스토리지
	2) NAS(Network Attached Storage)
		- 네트워크에 연결된 방식의 스토리지
	3) SAN(Storage Area Network)
		- 광채널로 연결한 고속데이터 네트워크

RAID(Redundant Array of Inexpensive Disks)
: 복수의 하드디스크를 하나의 드라이브처럼 인식하고 표기

RAID 구성
	1) 스트라이핑
		- 여러 개의 디스크에 라운드로빈 방식으로 저장
	2) 미러링
		- 데이터를 그대로 복제

RAID 형태
	- RAID-0 : 스트라이핑 방식
	- RAID-1 : 미러링 방식
	- RAID-2 : 해밍코드 방식
	- RAID-3 : 패리티 정보
	- RAID-4 : 패리티 정보, 블록단위
	- RAID-5 : 각각의 디스크에 패리티 정보
	- RAID-6 : 2개의 디스크에 패리티 정보






















