스프링 컨테이너

생성
	ApplicationContext ac = new AnnotationconfigApplicationContext(AppConfig.class);
 - ApplicationContext를 스프링 컨테이너라 한다.
 - ApplicationContext는 인터페이스이다
 - 스프링 컨테이너는 XML을 기반으로 만들 수 있고, Annotation 기반의 자바 설정 클래스로 만들 수 있다.
 - 직전에 AppConfig를 사용했던 방식이 Annotation 기반의 자바 설정 클래스로 스프링 컨테이너를 만든 것이다.
	-> new AnnotationConfigApplicationcontext(AppConfig.class);
	-> 이 클래스는 ApplicationContext 인터페이스의 구현체이다.


생성 과정
1) 스프링 컨테이너 생성
	new AnnotationConfigApplicationContext(AppConfig.class)
 - 스프링 컨테이너를 생성할 때는 구성 정보를 지정해주어야 한다.
 - 여기서는  AppConfig.class를 구성 정보로 지정했다.

2) 스프링 빈 등록
 - 스프링 컨테이너는 파라미터로 넘어온 설정 클래스 정보(AppConfig.class)를 사용해서 스프링 빈을 등록한다.
 - 빈 이름
	-> 빈 이름은 메서드 이름을 사용한다.
	-> 빈 이름을 직접 부여할 수 도 있다.
	-> @Bean(name = "memberService2")
	-> 빈 이름은 항상 다른 이름을 부여해야 한다.(같은 이름으로 기존 빈을 덮어버리면 오류 발생)

3) 스프링 빈 의존관계 - 설정
AppConfig.class
	@Bean
	public MemberService memberService(){
		return new MemberServiceImpl(memberRepository());
	}
	@Bean
	public OrderService orderService(){
		return new OrderServiceImpl(memberRepository(), discountPolicy());
	}
	@Bean
	public MemberRepository memberRepository(){
		return new MemoryMemberRepository();
	}
	@Bean
	public DiscountPolicy discountPolicy(){
		return new RateDiscountPolicy();
	}

4) 스프링 빈 의존관계 - 완료
	        역할                            구현              의존            역할                                   구현 
	MemberService    ->    MemberServiceImpl    ->    MemberRepository    ->    MemoryMemberRepository
	        역할                            구현              의존            역할                                   구현
	OrderService       ->    OrderServiceImpl        ->    MemberRepository    ->    MemoryMemberRepository
					       ->    DiscountPolicy	   ->    RateDiscountPolicy

	-> 스프링 컨테이너는 설정 정보를 참고해서 의존관계를 주입(DI)한다.
	-> 스프링 빈을 생성하고, 의존관계를 주입하는 단계가 나누어져 있다.

컨테이너에 등록된 모든 빈 조회

모든 빈 출력 -> 스프링이 내부에서 사용하는 빈 + 사용자가 정의한 빈
	- ac.getBeanDefinitionNames() : 스프링에 등록된 모든 빈 이름을 조회한다.
		-> 이름의 집합이기 때문에 배열에 저장한다.
	- ac.getBean() : 빈 이름으로 빈 객체(인스턴스)를 조회한다.
		-> 하나의 이름이기 때문에 변수에 저장한다.
	- ac.getBeanDefinition() : 빈 이름으로 빈 객체 상세정보를 조회한다.
	- ac.BeansOfType() : 자식이 여러 개일 때, 자식을 key-value 형태로 조회
		-> key-value형태이기 때문에 Map에 저장한다.
@Test
@Display("모든 빈 출력")
void findAllBean(){
	String[] bdNames = ac.getBeanDefinitionNames();
	for (String bdName : bdNames){
		Object bean = ac.getBean(bdName);
		System.out.println("name = " + bdName + ", object = " + bean);
	}
}

애플리케이션 빈 출력 -> 사용자가 정의한 빈
	- 스프링이 내부에서 사용하는 빈은 getRole()로 구분할 수 있다.
		-> bd.ROLE_APPLICATION : 일반적으로 사용자가 정의한 빈
		-> bd.ROLE_INFRASTRUCTURE : 스프링이 내부에서 사용하는 빈
@Test
@Display("애플리케이션 빈 출력")
void public findApplicationBean(){
	String[] bdNames = ac.getBeanDefinitionNames();
	for (String bdName : bdNames){
		BeanDefinition bd = ac.getDefinition(bdName);
		if (bd.getRole() == bd.ROLE_APPLICATION){
			Object bean = ac.getBean(bdName);
			System.out.println("name = " + bdName + ", object = " + bean);
		}
	}
}

기본 조회
	- ac.getBean(빈이름, 타입)
	- ac.getBean(타입)
	- 조회 대상 스프링 빈이 없으면 예외 발생
		-> NoSuchBeanDefinitionException : No bean named 'xxxxx' available
@Test
@DisplayName("빈 이름으로 조회")
void findBeanByName(){
	MemberService memberService = ac.getBean("memberService", MemberService.class);
	assertThat(memberService).isInstanceOf(MemberServiceImpl.class);
}

@Test
@DisplayName("빈 타입으로 조회")
void findBeanByType(){
	MemberService memberService = ac.getBean(MemberService.class);
	assertThat(memberService).isInstanceOf(MemberServiceImpl.class);
}

@Test
@DisplayName("구체 타입으로 조회")
void findBeanByName2(){
	MemberService memberService = ac.getBean("memberService", MemberServiceImpl.class);
	assertThat(memberService).isInstanceOf(MemberServiceImpl.class);
}

@Test
@DisplayName("빈 이름으로 조회X")
void findByNameX(){
	//예외가 발생했을 경우 통과
	assertThrows(NoSuchBeanDefinitionException.class,
		() -> ac.getBean("xxxxx", MemberService.class));
}

동일한 타입이 둘 이상 조회
	- 타입으로 조회 시 같은 타입의 스프링 빈이 둘 이상이면 오류가 발생한다. 이 때는 빈 이름을 지정하자.
	- ac.getBeansOfType()을 사용하면 해당 타입의 모든 빈을 조회할 수 있다.
@Configuration
static class SameBeanConfig{	-> 임시 Config class
	@Bean
	public MemberRepository memberRepository1(){
		return new MemoryMemberRepository();
	}
	public MemberRepository memberRepository2(){
		return new MemoryMemberRepository();
	}
}

@Test
@DisplayName("같은 타입이 둘 이상 있으면, 중복 오류가 발생한다")
void findBeanTypeDuplicate(){
	//MemberRepository bean = ac.getBean(MemberRepository.class);
	assertThrows(NoSuchBeanDefinitionException.class,
		() -> ac.getBean(MemberRepository.class));
}

@Test
@DisplayName("같은 타입이 둘 이상 있으면, 빈 이름을 지정하면 된다")
void findBeanByName(){
	MemberRepository memberRepository = ac.getBean("MemberRepository1", MemberRepository.class);
	assertThat(memberRepository).isInstanceOf(MemberRepository.class);
}

@Test
@DisplayName("특정 타입을 모두 조회하기")
void findAllByType(){
	Map<String, MemberRepository> bot = ac.getBeansOfType(MemberRepository.class);
	for (String key : bot.keySet()){
		System.out.println("key = " + key + ", value = " + bot.get(key));
	}
	System.out.println("beansOfType = " + bot);
	assertThat(bot.size()).isEqualTo(2);
}

상속 관계 조회
	- 부모 타입으로 조회하면, 자식 타입도 함께 조회한다.
	- 그래서 모든 자바 객체의 최고 부모인 Object 타입으로 조회하면, 모든 스프링 빈을 조회한다.

						1번 : 1, 2, 3, 4, 5, 6, 7
			1			2번 : 2, 4, 5
		       ↗	      ↖			3번 : 3, 6, 7
	                 2	           3			4번 : 4
                          ↗       ↖	      ↗	 ↖		5번 : 5
                       4 	            5   6	      7		6번 : 6
						7번 : 7
@Configuration
static class TestConfig{ -> 임시 Confin class
	@Bean
	public DiscountPolicy rateDiscountPolicy(){
		return new RateDicountPolicy();
	}
	@Bean
	public DiscountPolicy fixDiscountPolicy(){
		return new FixDiscountPolicy();
	}
}

@Test
@DisplayName("부모 타입으로 조회 시, 자식이 둘 이상 있으면, 중복 오류가 발생한다")
void findBeanByParentTypeDuplicate(){
	//DiscountPolicy bean = ac.getBean(DiscountPolicy.class);
	assertThrows(NoUniqueBeanDefinitionException.class,
		() -> ac.getBean(DiscountPolicy.class));
}
@Test
@DisplayName("부모 타입으로 조회 시 자식이 둘 이상 있으면, 빈 이름을 지정하면 된다")
void findBeanByParentTypeBeanName(){
	DiscountPolicy ratediscountPolicy = ac.getBean("rateDiscountPolicy", DiscountPolicy.class);
	assertThat(NoUniqueBeanDefinitionException.class,
		() -> ac.getBean(DiscountPolicy.class));
}
@Test
@DisplayName("특정 하위 타입으로 조회")
void findBeanBySubType(){
	RateDiscountPolicy bean = ac.getBean(RateDiscountPolicy.class);
	assertThat(bean).isInstanceOf(RateDiscountPolicy.class);
}
@Test
@DisplayName("부모 타입으로 모두 조회하기")
void findAllBeanByParentType(){
	Map<String, DiscountPolicy> bot = ac.getBeansOfType(DiscountPolicy.class);
	assertThat(bot.size()).isEqualTo(2);
	for (String key : bot.ketSet()){
		System.out.println("key = " + key + ", value = " + bot.get(key));
	}
}
@Test
@DisplayName("Object 타입으로 모두 조회하기")
void findAllBeanByObjectType(){
	Map<String, Object> bot = ac.BeansOfType(Object.class);
	for (String key : bot.keySet()){
		System.out.println("key = " + key + ", value = " + bot.get(key));
	}
}


BeanFactory와 ApplicationContext

BeanFactory
 - 스프링 컨테이너의 최상위 인터페이스다.
 - 스프링 빈을 관리하고 조회하는 역할을 담당한다.
 - getBean()을 제공한다.
 - 지금까지 우리가 사용했던 대부분의 기능은 BeanFactory가 제공하는 기능이다.

ApplicationContext
 - BeanFactory 기능을 모두 상속받아서 제공한다.
 - 빈 관리 기능 + 편리한 부가 기능을 제공한다.
	-> 메시지소스를 활용한 국제화 기능 : 한국에서 접속하면 한국어로, 영어권에서 접속하면 영어로 출력
	-> 환경변수 : 로컬, 개발, 운영 등을 구분해서 처리
	-> 애플리케이션 이벤트 : 이벤트를 발행하고 구독하는 모델을 편리하게 지원
	-> 편리한 리소스 조회 : 파일, 클래스패스, 외부 등에서 리소스를 편리하게 조회
 - BeanFactory를 직접 사용할 일은 거의 없기 때문에 부가기능이 포함된 ApplicationContext를 사용한다.


다양한 설정 형식 지원 - 자바코드, XML
 - 스프링 컨테이너는 다양한 형식의 설정 정보를 받아들일 수 있게 유연하게 설계되어 있다.
	-> 자바코드, XML, Groovy 등
			BeanFactory <<Interface>>
			       ↑
			ApplicationContext <<Interface>>
		↗	       ↑		↖
	AnnotationConfig	GenericXml	Xxx
	ApplicationContext	ApplicationContext	ApplicationContext
		↓	       ↓		↓
	AppConfig.class	appConfig.xml	appConfig.xxx

Annotation 기반 자바 코드 설정 사용
 - 지금까지 했던 것이다.
 - new AnnotationConfigApplicationContext(Appconfig.class)
 - AnnotationConfigApplicationContext 클래스를 사용하면서 자바 코드로 설정 정보를 넘기면 된다.

XML 설정 사용
 - 최근에는 스프링 부트를 많이 사용하면서 XML기반의 설정은 잘 사용하지 않는다.
   하지만 아직 많은 레거시 프로젝트 들이 XML로 되어 있고, 또 XML을 사용하면 컴파일 없이 빈 설정 정보를
   변경할 수 있는 장점도 있다.
 - GenericXmlApplicationContext를 사용하면서 xml 설정 파일을 넘기면 된다.
 - src/main/resources/appConfig.xml -> 경로에 파일 생성

@Test
void xmlAppContext(){
	ApplicationContext ac = new GenericXmlApplicationContext("appConfig.xml");

	MemberService memberService = ac.getBean("memberService", MemberService.class);
	assertThat(memberService).isInstanceOf(MemberService.class);
}

XML 기반의 스프링 빈 설정 정보

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://
www.springframework.org/schema/beans/spring-beans.xsd">
<bean id="memberService" class="hello.core.member.MemberServiceImpl">
<constructor-arg name="memberRepository" ref="memberRepository" />
</bean>
<bean id="memberRepository" class="hello.core.member.MemoryMemberRepository" />
<bean id="orderService" class="hello.core.order.OrderServiceImpl">
<constructor-arg name="memberRepository" ref="memberRepository" />
<constructor-arg name="discountPolicy" ref="discountPolicy" />
</bean>
<bean id="discountPolicy" class="hello.core.discount.RateDiscountPolicy" />
</beans>

	-> appConfig.xml 설정과 AppConfig.java 설정이 거의 비슷하다.

스프링 빈 설정 메타 정보 - BeanDefinition
 - 스프링이 다양한 설정 형식을 지원할 수 있는 이유는 BeanDefinition이라는 추상화가 있기 때문이다.
 - 쉽게 이야기해서 역할과 구현을 개념적으로 나눈 것이다.
	-> XML을 읽어서 BeanDefinition을 만들면 된다.
	-> 자바 코드를 읽어서 BeanDefinition을 만들면 된다.
	-> 스프링 컨테이너는 자바 코드인지, XML인지 몰라도 되며 오직 BeanDefinition만 알면 된다.
 - BeanDefinition을 빈 설정 메타정보라 한다.
	-> @Bean, <bean> 당 각각 하나의 메타 정보가 생성된다.
 - 스프링 컨테이너는 이 메타 정보를 기반으로 스프링 빈을 생성한다.

	스프링 컨테이너	->	BeanDefinition
			       ↗	        ↑	       ↖
	             AppConfig.class      appConfig.xml     appConfig.xxx

 - AnnotationConfigApplicationContext는 AnnotatedBeanDefinitionReader를 사용해서
   AppConfig.class를 읽고 BeanDefinition을 생성한다.
 - GenericXmlApplicationContext는 XmlBeanDefinitionReader를 사용해서
   appConfig.xml 설정 정보를 읽고 BeanDefinition을 생성한다.
 - 새로운 형식의 설정 정보가 추가되면, XxxBeanDefinitionReader를 만들어서 BeanDefinition을 생성하면 된다.
	-> 각각 DefinitionReader가 있기에 메타정보를 읽을 수 있다.

BeanDefinition 정보
 - BeanClassName : 생성할 빈의 클래스명(자바 설정처럼 팩토리 역할의 빈을 사용할 경우에는 없음)
 - factoryBeanName : 팩토리 역할의 빈을 사용할 경우 이름, ex) appConfig
 - factoryMethodName : 빈을 생성할 팩토리 메서드 지정, ex) memberService
 - Scope : 싱글톤(기본값)
 - lazyInit : 스프링 컨테이너를 생성할 때 빈을 생성하는 것이 아니라, 실제 빈을 사용할 때 까지
	최대한 생성을 지연처리 하는지 여부
 - InitMethodName : 빈을 생성하고, 의존관계를 적용한 뒤에 호출되는 초기화 메서드명
 - DestroyMethodName : 빈의 생명주기가 끝나서 제거하기 직전에 호출되는 메서드명
 - Constructor arguments, Properties : 의존관계 주입에서 사용한다.(자바 설정처럼 팩토리 역할의 빈을 사용할 경우에는 없음)










