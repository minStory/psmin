스프링 입문 요약

@Controller
	1) 정적 컨텐츠(Static) 방식
		1. localhost:8080/hello-static.html 입력
		2. hello-static 관련 컨트롤러 찾아간다 -> 컨트롤러 X
		3. resource: static/hello-static.html을 찾아간다.

	@GetMapping("url명") : localhost:8080/url명 -> url명 부분을 Mapping 해준다.

	2) MVC/템플릿 엔진 방식 : ViewResolver 작동 (resources:templates/+(ViewName)+.html을 찾아간다.

		@GetMapping("hello") -> localhost:8080/hello
		public String 메서드명(Model model){
			model.addAttribute("data", "spring!!");
				-> 속성명 : html문서 내 thymeleaf 문법의 ${data}와 Mapping
				-> 속성값 : ${data}가 spring!!으로 치환되어 출력
			return hello;
				-> templates 폴더의 hello.html 을 찾아간다.
		}

	3) API 방식 : HttpMessageConverter 작동
	@ResponseBody : API방식에 사용

		- StringConverter : return값이 문자열 -> 문자열 그대로 출력

		@GetMapping("hello-string") -> localhost:8080/hello-string
		@ResponseBody
		public String 메서드명(@RequestParam("key") String name){
				-> @RequestParam : 매개변수 name을 key의 입력받은 value값으로 치환
			return "hello "+name;
				-> return값이 문자열
				-> localhost:8080/hello-string?key=value!! 입력
				-> hello value!! 출력
		}

		- JsonConverter : return값이 객체 -> key-value 객체 형태로 출력

		@GetMapping("hello-api") -> localhost:8080/hello-api
		@ResponseBody
		public String 메서드명(@RequestParam("key") String name){
				-> @RequestParam : 매개변수 name을 key의 입력받은 value값으로 치환
			Hello h = new Hello();
			h.setName(name);
			return hello;
				-> return값이 객체
				-> 매개변수 name이 입력받은 value값으로 치환
				-> setName을 통해 h의 name에는 value값 대입
				-> localhost:8080/hello-api?key=value@@
				-> {"name" : "value@@"} 출력
		}
		static class Hello{
			String name;
			public String getName(){ return name; }
			public void setName(){ this.name = name; }
		}






스프링 빈과 의존관계 : 스프링 컨테이너에 스프링 빈을 등록한다.
1) 컴포넌트 스캔과 자동 의존관계 설정
@Component
			의존			의존
	@Controller	->	@Service		->	@Repository
	@Autowired		@Autowired		
	(생성자)			(생성자)			store(저장소)

	-> @SpringBootApplication(main method)이 속한 package 내에서만 ComponentScan 한다.
	-> 각 클래스를 싱글톤으로 등록하여 공유한다.

2) 자바 코드로 직접 스프링 빈 등록
	-> 일반적으로는 컴포넌트 스캔을 사용하지만 추후에 레포지토리를 변경해야하는 상황일 때
	코드에 직접 손대지 않고 Bean을 통해서 변경할 수 있다
	@SpringBootApplication의 동일 Depth에 SpringConfigure class 생성
	@Configuration
	public class SpringConfigure{
		@Bean
		public MemberService service(){
			return new MemberService(repository());
				-> MemberRepository에 의존하여 MemoryMemberService 객체 생성
		}
		public MemoryMemberRepository repository(){
			return new MemoryMemberRepository();
				-> MemoryMemberRepository 객체 생성
		}
	}
	@Controller는 @Autowired를 통해 MemberService에 의존



DI(Dependency Injection) : @Autowired 사용
	1) 필드 주입
		중간에 값을 바꿀 수 있는 방법이 아예 없다.
	2) Setter 주입
		method를 사용하기 위해 public으로 노출되어 있다.
	3) 생성자 주입 ✅
		조립 시점에 한 번만 생성하고 변경을 못하도록 막을 수 있다.
		-> 생성자가 1개일 때는 @Autowired 생략 가능

	@Autowired는 스프링이 관리하는 객체에서만 동작한다.
		-> 내가 직접 생성한 객체에서는 동작하지 않는다.




스프링 컨테이너
	helloController		->	memberService
					↙             ↓
			<memory>		<jdbc>
			memberRepository		memberRepository

	- 개방-폐쇄 원칙(OCP, Open-Closed Principle) : 확장에는 열려있고, 수정에는 닫혀있다.
	- 스프링의 DI을 사용하면  기존 코드를 전혀 손대지 않고, 설정만으로 구현 클래스를 변경할 수 있다.
	- 데이터를 DB에 저장하므로 스프링 서버를 다시 실행해도 데이터가 안전하게 저장된다.



스프링 통합 테스트
@Test : 하단에 테스트 메서드 작성

@AfterEach : 각 테스트가 종료될 때 마다 하단의 기능을 실행한다.
	-> 한번에 여러 테스트를 실행하면 메모리 DB에 직전 테스트의 결과가 남을 수 있기 때문에
	다음 테스트가 실패할 가능성이 있는데, 메모리 DB의 저장된 데이터를 삭제하여 이를 해결할 수 있다.

@BeforeEach : 각 테스트 실행 전에 호출된다.
	-> 테스트가 서로 영향이 없도록 항상 새로운 객체를 생성하고, 의존관계도 새로 맺어줄 수 있다.

@SpringBootTest : 스프링 컨테이너와 테스트를 함께 실행한다.

@Transactional : 테스트 케이스에 이 어노테이션이 있으면, 테스트 시작 전에 트랜잭션을 시작하고,
		테스트 완료 후에 항상 롤백한다. 이렇게 하면 DB에 데이터가 남지 않으므로
		다음 테스트에 영향을 주지 않는다.

순수 자바코드 테스트 -> 단위 테스트
@SpringBootTest를 통한 테스트 -> 통합테스트
	-> 단위 테스트가 좋은 테스트일 확률이 훨씬 높다.





Jdbc : 순수 JDBC API로 직접 코딩하는 것은 20년 전 이야기이므로 참고만 한다.

JdbcTemplate : 스프링 JdbcTemplate과 MYBatis 같은 라이브러리는 JDBC API에서 본 반복 코드를 대부분 제거해준다.
		하지만 SQL은 직접 작성해야 한다.

JPA : ORM(Object Relationship Mapping) 기술
	기존의 반복 코드는 물론이고, 기본적인 SQL도 JPA가 직접 만들어서 실행해준다.
	SQL과 데이터 중심의 설계에서 객체 중심의 설계로 패러다임을 전환할 수 있다.
	개발 생산성을 크게 높일 수 있다.
	-> MemberService 계층에 @Tranactional을 걸어줘야 한다.

Spring Data JPA : 리포지토리에 구현 클래스 없이 인터페이스 만으로 개발을 완료할 수 있다.
		반복 개발해온 기본 CRUD 기능도 스프링 데이터 JPA가 모두 제공한다.
		개발자는 핵심 비즈니스 로직을 개발하는데 집중할 수 있다.
	-> 스프링 데이터 JPA는 JPA를 편리하게 사용하도록 도와주는 기술이기에 JPA를 먼저 학습해야 한다.
	-> findByName(), findByEmail() 처럼 메서드 이름 만으로 조회 기능 제공
	-> 페이징 기능 자동 제공


AOP(Aspect Oriented Programming) : 모든 메소드의 호출 시간을 측정하고 싶을 때 사용
	-> 해당 클래스에 @Aspect로 AOP 등록하고, @Component로 스프링 빈에 등록해준다.
	-> 공통 관심 사항(cross-cutting concern)과 핵심 관심 사항(core concern) 분리 가능
	-> 시간을 측정하는 로직을 별도의 공통 로직으로 만들었다.(TimeTraceAop Class)
	-> 변경이 필요하면 이 로직만 변경할 수 있다.
	-> 원하는 적용 대상을 선택할 수 있다.ex) @Around("execution(* hello.hellospring.service..*(..))")

	기존 동작 방식
	memberController		->	memberService

	AOP 적용 후 동작 방식
	memberController		->	프록시(memberService)
						↓
					실제 memberService

	AOP 전체 적용 그림
	프록시(memberController)	->	프록시(memberService)	->	프록시(memberRepository)
		↓		↗		↓		↗		↓
	실제(memberController)		실제(memberService)		실제(memberRepository)

	-> 실제 Proxy 주입되는지 콘솔 확인(SpringCGLIB 생성)
	-> memberService = class hello.hellospring.service.MemberService$$SpringCGLIB$$0













