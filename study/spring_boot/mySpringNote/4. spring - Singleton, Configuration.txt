웹 애플리케이션과 싱글톤
 - 스프링은 태생이 기업용 온라인 서비스 기술을 지원하기 위해 탄생했다.
 - 대부분의 스프링 애플리케이션은 웹 애플리케이션이다. 물론 웹이 아닌 애플리케이션 개발도 얼마든지 개발할 수 있다.
 - 웹 애플리케이션은 보통 여러 고객이 동시에 요청을 한다.
 - 우리가 만들었던 스프링 없는 순수한 DI컨테이너인 AppConfig는 요청을 할 때 마다 객체를 새로 생성한다.
 - 고객 트래픽이 초당 100이 나오면 초당 100개 갳에가 생성되고 소멸된다.
	-> 메모리 낭비
 - 해결방안은 해당 객체가 딱 1개만 생성되고, 공유하도록 설계하면 된다.
	-> 싱글톤 패턴


싱글톤 패턴
 - 클래스의 인스턴스가 딱 1개만 생성되는 것을 보장하는 디자인 패턴
 - 그래서 객체 인스턴스를 2개 이상 생성하지 못하도록 막아야 한다.
 - private 생성자를 사용해서 외부에서 임의로 new 키워드를 사용하지 못하도록 막아야 한다.

public class SingletonService{
	//1. static영역에 객체 instance를 미리 하나 생성해서 올려둔다.
	private static final SingletonService instance = new SingletonService();
	//2. public으로 열어서 객체 인스턴스가 필요하면 이 static 메서드를 통해서만 조회하도록 허용한다.
	public static SingletonService getInstance(){
		return instance;
	}
	//3. 생성자를 private으로 선언해서 외부에서 new 키워드를 사용한 객체 생성을 못하게 막는다.
	private SingletonService(){
	}
}

싱글톤 패턴의 문제점
 - 싱글톤 패턴을 구현하는 코드 자체가 많이 들어간다.
 - 의존관계상 클라이언트가 구체 클래스에 의존한다. -> DIP 위반
 - 클라이언트가 구체 클래스에 의존해서 OCP를 위반할 가능성이 높다.
 - 테스트하기 어렵다.
 - 내부 속성을 변경하거나 초기화하기 어렵다.
 - private 생성자로 자식 클래스를 만들기 어렵다.
 - 결론적으로 유연성이 떨어진다.
 - 안티패턴으로 불리기도 한다.


싱글톤 컨테이너
 - 스프링 컨테이너는 싱글턴 패턴을 적용하지 않아도, 객체 인스턴스를 싱글톤으로 관리한다.
	-> ApplicationContext 객체 생성 했을 때, 하나만 생성해서 관리한다.
 - 스프링 컨테이너는 싱글톤 컨테이너 역할을 한다.
   이렇게 싱글톤 객체를 생성하고 관리하는 기능을 싱글톤 레지스트리라 한다.
 - 스프링 컨테이너의 이런 기능 덕분에 싱글턴 패턴의 모든 단점을 해결하면서 객체를 싱글톤으로 유지할 수 있다.
	-> 싱글톤 패턴을 위한 지저분한 코드가 들어가지 않아도 된다.
	-> DIP, OCP, 테스트, private 생성자로 부터 자유롭게 싱글톤을 사용할 수 있다.

 - 스프링 컨테이너 덕분에 고객의 요청이 올 때마다 객체를 생성하는 것이 아니라,
   이미 만들어진 객체를 공유해서 효율적으로 재사용할 수 있다.
	-> 스프링의 기본 빈 등록 방식은 싱글톤이지만, 요청할 때 마다 새로운 객체를 생성해서 반환하는 기능도 제공



싱글톤 방식의 주의점
 - 싱글톤 패턴이든, 스프링 같은 싱글톤 컨테이너를 사용하든, 객체 인스턴스를 하나만 생성해서 공유하는 싱글톤 방식은
   여러 클라이언트가 하나의 같은 객체 인스턴스를 공유하기 때문에 싱글톤 객체는 상태를 유지(stateful)하게 설계하면 안된다.
 - 무상태(stateless)로 설계해야 한다!
	-> 특정 클라이언트에 의존적인 필드가 있으면 안된다.
	-> 특정 클라이언트가 값을 변경할 수 있는 필드가 있으면 안된다.
	-> 가급적 읽기만 가능해야 한다.
	-> 필드 대신에 자바에서 공유되지 않는 지역변수, 파라미터, ThreadLocal 등을 사용해야 한다.
 - 스프링 빈의 필드에 공유 값을 설정하면 정말 큰 장애가 발생할 수 있다!



@Configuration과 싱글톤
 - memberService 빈을 만드는 코드를 보면 memberRepository()를 호출
	-> new MemoryMemberRepository() 호출
 - orderService 빈을 만드는 코드도 동일하게 memberRepository()를 호출
	-> new MemoryMemberRepository() 호출
 - MemberRepository 빈을 만드는 코드도 동일하게 memberRepository()를 호출
	-> new MemoryMemberRepository() 호출
 - new가 3번으로 싱글톤이 깨지는 것처럼 보인다.

 - 3개의 객체가 다른지 확인하기 위해 memberServiceImpl과 orderServiceImpl에 MemberRepository의 객체를 반환해주는
   getMemberRepository() 메서드 임시 생성 후 객체 출력
	-> 객체 동일 -> 싱글톤 유지 -> ???


@Configuration과 바이트코드 조작의 마법
 - 스프링 컨테이너는 싱글톤 레지스트리다. 따라서 스프링 빈이 싱글톤이 되도록 보장해주어야 한다.
   그런데 스프링이 자바 코드까지 어떻게 하기는 어렵다. 자바 코드를 보면 분명 3번 호출이 되어야 하는 것이 맞다.
   그래서 스프링은 클래스의 바이트코드를 조작하는 라이브러리를 사용한다.
   모든 비밀은 @Configuration을 적용한 AppConfig에 있다.

@Test
void configurationDeep(){
	ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
	//AppConfig도 스프링 빈으로 등록된다.
	AppConfig bean = ac.getBean(AppConfig.class);

	System.out.println("bean = " + bean.getClass());
	//출력: bean = class hello.core.AppConfig$$EnhancerBySpringCGLIB$$bd479d70
}
 - 사실 AnnotationConfigApplicationContext에 파라미터로 넘긴 값(AppConfig.class)은 스프링 빈으로 등록된다.
 - 순수한 클래스라면 class hello.core.AppConfig 과 같이 출력되어야 하지만
   스프링이 CGLIB라는 바이트코드 조작 라이브러리를 사용해서 AppConfig 클래스를 상속받은
   임의의 다른 클래스를 만들고, 그 다른 클래스를 스프링 빈으로 등록했다.

AppConfig@CGLIB 예상 코드
@Bean
public MemberRepository memberRepository(){
	if(memoryMemberRepository가 이미 스프링 컨테이너에 등록되어 있으면?){
		return 스프링 컨테이너에서 찾아서 반환;
	} else {  //스프링 컨테이너에 없으면?
		기존 로직을 호출해서 MemoryMemberRepository를 생성하고 스프링 컨테이너에 등록
		return 반환;
	}
}
 - @Bean이 붙은 메서드마다 이미 스프링 빈이 존재하면 빈을 반환하고,
   스프링 빈이 없으면 생성해서 스프링 빈으로 등록하고 반환하는 코드가 동적으로 만들어진다.
	-> 싱글톤 보장
	-> AppConfig@CGLIB는 AppConfig의 자식 타입이므로, AppConfig 타입으로 빈을 조회할 수 있다.

 - @Configuration을 적용하지 않고, @Bean만 적용하면 스프링 빈으로 등록은 되지만, 싱글톤을 보장하지 않는다.













