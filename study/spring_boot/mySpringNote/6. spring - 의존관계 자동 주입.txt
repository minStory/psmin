다양한 의존관계 주입 방법
 - 생성자 주입
	-> 생성자를 통해서 의존관계를 주입받는 방법
	-> 생성자 호출 시점에 딱 1번만 호출되는 것이 보장
	-> 불변, 필수 의존관계에 사용
	-> 생성자가 딱 1개만 있으면 @Autowired 생략 가능
 - 수정자 주입(setter 주입)
	-> setter라 불리는 필드의 값을 변경하는 수정자 메서드를 통해서 의존관계 주입받는 방법
	-> 선택, 변경 가능성이 있는 의존관계에 사용
	-> 자바빈 프로퍼티 규약의 수정자 메서드 방식을 사용하는 방법(getter, setter 방식)
 - 필드 주입
	-> 필드에 바로 주입하는 방법
	-> 코드가 간결하지만 외부에서 변경이 불가능해서 테스트하기 힘들다는 단점이 있다.
	-> DI 프레임워크가 없으면 아무것도 할 수 없다.(사용 X)
	-> 애플리케이션의 실제 코드와 관계 없는 테스트 코드에는 사용 가능
 - 일반 메서드 주입
	-> 일반 메서드를 통해서 주입받는 방법
	-> 한번에 여러 필드를 주입 받을 수 있다.
	-> setter 주입과 비슷한 방식(사용 X)



옵션 처리
 - 주입할 스프링 빈이 없어도 동작해야 할 때가 있다. 그런데 @Autowired만 사용하면 required 옵션의 기본값이
   true로 되어 있어서 자동 주입 대상이 없으면 오류가 발생한다.
1. @Autowired(required = false) : 자동 주입할 대상이 없으면 수정자 메서드 자체가 호출이 안됨
2. org.springframework.lang.@Nullable : 자동 주입할 대상이 없으면 null이 입력된다.
3. Optional<> : 자동 주입할 대상이 없으면 Optional.empty가 입력된다.



생성자 주입 선택
불변
 - 대부분의 의존관계 주입은 한번 일어나면 애플리케이션 종료시점까지 의존관계를 변경할 일이 없다.
 - 수정자 주입을 사용하면 set메서드를 public으로 열어두어야 한다.
 - 누군가 실수로 변경할 수도 있고, 변경하면 안되는 메서드를 열어두는 것은 좋은 설계 방법이 아니다.
 - 생성자 주입은 객체를 생성할 때 딱 1번만 호출되므로 이후에 호출되는 일이 없다. -> 불변하게 설계 가능

누락
 - 생성자 주입을 사용하면 주입 데이터를 누락했을 때 컴파일 오류가 발생한다.
   그리고 IDE에서 바로 어떤 값을 필수로 주입해야 하는지 알 수 있다.

final 키워드
 - 생성자 주입을 사용하면 필드에 final 키워드를 사용할 수 있다. 그래서 생성자에서 혹시라도 값이 설정되지 않는
   오류를 컴파일 시점에서 막아준다.
 - 수정자 주입을 포함한 나머지 주입 방식은 모두 생성자 이후에 호출되므로, 필드에 final 키워드를 사용할 수 없다.
 - 컴파일 오류는 세상에서 가장 빠르고, 좋은 오류이다.

	-> 생성자 주입 방식을 선택하는 이유는 프레임워크에 의존하지 않고,
		순수한 자바 언어의 특징을 잘 살리는 방법이다.
	-> 기본으로 생성자 주입을 사용하고, 필수 값이 아닌 경우에는 수정자 주입 방식을 옵션으로 부여하면 된다.
		생성자 주입과 수정자 주입을 동시에 사용할 수 있다.
	-> 필드 주입은 사용하지 않는게 좋다.



롬복
 - 필드에 final 키워드가 붙은 필드를 모아서 생성자를 자동으로 만들어준다.(보이지는 않지만 실제 호출 가능)
	-> @RequiredArgsConstructor
 - @Getter, @Setter, @ToString 등의 코드도 자동 생성 할 수 있다.

Setting -> Plugins -> lombok 설치
Setting -> Annotations Processor -> Enable annotion processing 체크
build.gradle 코드
-----------------------------------------------------------------------------------------
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'hello'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

//lombok 설정 추가 시작
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}
//lombok 설정 추가 끝

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'

	//lombok 라이브러리 추가 시작
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	//lombok 라이브러리 추가 끝

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}
-----------------------------------------------------------------------------------------



@Autowired 필드명, @Qualifier, @Primary

@Autowired 필드명 매칭
 - @Autowired는 타입 매칭을 시도하고, 이때 여러 빈이 있으면 필드 이름, 파라미터 이름으로 빈 이름을 추가 매칭

	기존코드
	@Autowired
	private DiscountPolicy discountPolicy

	필드명을 빈 이름으로 변경
	@Autowired
	private DiscountPolicy rateDiscountPolicy

	-> 필드명이 rateDiscountPolicy이므로 정상 주입
	-> 필드명 매칭은 먼저 타입 매칭을 시도하고 그 결과에 여러 빈이 있을 때 추가로 동작하는 기능

@Qualifier
 - @Qualifier는 추가 구분자를 붙여주는 방법
	-> 주입 시 추가적인 방법을 제공하는 것이지 빈 이름을 변경하는 것은 아니다.

	@Component
	@Qualifier("mainDiscountPolicy")
	public class RateDiscountPolicy implements DiscountPolicy {}

	@Component
	@Qualifier("fixDiscountPolicy")
	public class FixDiscountPolicy implements DiscountPolicy {}

	-> 주입 시에 @Qualifier를 붙여주고 추가구분자 이름을 적어준다.

	생성자 자동 주입 예시
	@Autowired
	public OrderServiceImpl(MemberRepository memberRepository,
				@Qualifier("mainDiscountPolicy") DiscountPolicy discountPolicy) {
		this.memberRepository = memberRepository;
		this.discountPolicy = discountPolicy;
	}

	수성자 자동 주입 예시
	@Autowired
	public DiscountPolicy setDiscountPolicy(@Qualifier("mainDiscountPolicy") DiscountPolicy discountpolicy) {
		this.discountPolicy = discountPolicy;
	}

	-> @Qualifier로 주입할 때 @Qualifier("mainDiscountPolicy")를 못찾을 경우
		mainDiscountPolicy라는 이름의 스프링 빈을 추가로 찾는다.
		하지만 @Qualifier는 @Qualifier를 찾는 용도로만 사용하는게 명확하고 좋다.

	@Bean
	@Qualifier("mainDiscountPolicy")
	public DiscountPolicy discountPolicy() {
		return new...
	}

	-> 위와 같이 직접 빈 등록시에도 동일하게 사용 가능

1. @Qualifier끼리 매칭
2. 빈 이름 매칭
3. NoSuchBeanDefinitionException 예외 발생

@Primary
 - @Primary는 우선순위를 정하는 방법이다. @Autowired 시에 여러 빈이 매칭 되면 @Primary가 우선권을 가진다.

	@Component
	@Primary
	public class RateDiscountPolicy implements DiscountPolicy {}

	@Component
	@Primary
	public class FixDiscountPolicy implements DiscountPolicy {}

	-> rateDiscountPolicy가 우선권을 가지게 된다.

메인DB는 @Primary를 적용해서 커넥션해서 @Qualifier 지정없이 편리하게 조회하고,
서브DB는 @Qualifier를 지정해서 명시적으로 커넥션하는 방식으로 사용하면 코드를 깔끔하게 유지할 수 있다.

우선순위
@Primary는 기본값 처럼 동작하고, @Qualifier는 매우 상세하게 동작한다.
스프링은 자동보다는 수동이, 넓은 범위 보다는 좁은 범위의 선택권이 우선 순윈가 높다.
따라서  @Qualifier가 우선권이 높다.



애노테이션 직접 만들기
 - @Qualifier("mainDiscountPolicy") 이렇게 문자를 적으면 컴파일시 타입 체크가 안된다.
	다음과 같은 애노테이션을 만들어서 문제를 해결할 수 있다.

	@Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER,
	ElementType.TYPE, ElementType.ANNOTATION_TYPE})
	@Retention(RetentionPolicy.RUNTIME)
	@Documented
	@Qualifier("mainDiscountPolicy")
	public @interface MainDiscountPolicy {}

	@Component
	@MainDiscountPolicy
	public class Rate DiscountPolicy implements DiscountPolicy {}

	@Autowired
	public OrderServiceImpl(MemberRepository memberRepoistory,
				@MainDiscountPolicy DiscountPolicy discountPolicy) {
		this.memberRepository = memberRepository;
		this.discountPolicy = discountPolicy;

	-> 직접 이름을 지정해서 명확하게 지정할 수 있다.

애노테이션은 상속이라는 개념이 없어서 여러 애노테이션을 모아서 사용하는 기능을 스프링이 지원해준다.
다른 애노테이션들도 함께 조합해서 사용할 수 있다.



조회한 빈이 모두 필요할 때, List, Map
 - 의도적으로 해당 타입의 스프링 빈이 다 필요한 경우도 있다. 
	ex) 할인 서비스를 제공하는데, 클라이언트가 할인의 종류(rate, fix)를 선택할 수 있는 상황











