SRP, OCP, DIP 영역


@Test
@DisplayName("문구")
Assertions.assertThat(x).isEqualTo(y);


기본 구조


	        가입,조회
		->	회원서비스 - 역할
	        결과반환	(회원서비스) - 구현		↘

클라이언트						회원 저장소 - 역할
							(메모리, DB) - 구현
	        주문생성				↗
		->	주문서비스 - 역할
	        결과반환	(주문서비스) - 구현		->	할인 정책 - 역할
							(정액, 정률) - 구현


- 저장소, 정책 등 구현체가 변할 수 있는 경우

	기획자(AppConfig)를 생성하여 모든 기획을 담당시킨다. -> DI
	1. AppConfig에서 구현체 설정(결정)
	2. 구현체에서 의존할 인터페이스의 생성자 주입
	3. 클라이언트 요청이 있을 때 AppConfig 객체를 만들어서
	   AppConfig의 메서드를 통해 구현체를 생성자로 주입

AppConfig 리팩토링
	-> 객체 생성(new)의 중복을 없애서 한 부분만 수정하면 된다.
	-> 역할과 구현 클래스가 한눈에 들어오도록 하여 애플리케이션 전체 구성을 직관적으로 알 수 있다.

AppConfig 사용으로 사용영역과 구성영역이 완벽하게 분리된다.
	-> (정액 할인 정책 -> 정률 할인 정책) 구성영역만 변경하면 사용영역을 변경할 필요가 없다.


SOLID
 - SRP(단일 책임 원칙) : 한 클래스는 하나의 책임만 가져야 한다.
	-> 클라이언트 객체는 직접 구현 객체를 생성하고, 연결하고, 실행하는 다양한 책임을 가지고 있음
	-> SRP 단일 책임 원칙을 따르면서 관심사를 분리함
	-> 구현 객체를 생성하고 연결하는 책임을 AppConfig가 담당
	-> 클라이언트 객체는 실행하는 책임만 담당
		-> SRP 원칙 적용
 - DIP(의존관계 역전 원칙) : 프로그래머는 "추상화에 의존해야지, 구체화에 의존하면 안된다."
	-> 새로운 할인 정책을 개발하고, 적용하려고 하니 클라이언트 코드도 함계 변경해야 했다. 왜냐하면 기존
	클라이언트 코드(OrderServiceImpl)는 DIP를 지키며 DiscountPolicy 추상화 인터페이스에 의존하는 것 같았지만,
	FixDiscountPolicy 구체화 구현 클래스에도 함께 의존했다.
	-> 클라이언트 코드가 DiscountPolicy 추상화 인터페이스에만 의존하도록 코드를 변경했다.
	-> 하지만 클라이언트 코드는 인터페이스만으로는 아무것도 실행할 수 없다.
	-> AppConfig가 FixDiscountPolicy 객체 인스턴스를 클라이언트 코드 대신 생성해서 클라이언트 코드에
	의존관계를 주입했다.
		-> DIP 원칙 적용
 - OCP(개방-폐쇄 원칙) : 소프트웨어 요소는 확장에는 열려있으나 변경에는 닫혀있어야 한다.
	-> 다형성 사용하고 클라이언트가 DIP를 지킴
	-> 애플리케이션을 사용 영역과 구성 영역으로 나눔
	-> AppConfig가 의존관계를 FixDiscountPolicy -> RateDiscountPolicy로 변경해서 클라이언트 코드에
	주입하므로 클라이언트 코드는 변경하지 않아도 됨
	-> 소프트웨어 요소를 새롭게 확장해도 사용 영역의 변경은 닫혀 있다!
		-> OCP 원칙 적용


IoC(Inversion of Control) : 제어의 역전
	-> 기존 프로그램은 클라이언트 구현 객체가 스스로 필요한 서버 구현 객체를 생성하고, 연결하고, 실행했다.
	한마디로 구현 객체가 프로그램의 제어 흐름을 스스로 조종했다.
	-> 반면에 AppConfig가 등장한 이후에 구현 객체는 자신의 로직을 실행하는 역할만 담당한다.
	프로그램의 제어 흐름은 이제 AppConfig가 가져간다. 예를 들어 orderServiceImpl은 필요한 인터페이스들을
	호출하지만 어떤 구현 객체들이 실행될지 모른다.
	-> 프로그램의 제어 흐름에 대한 권한은 모두 AppConfig가 가지고 있다. 심지어 OrderServiceImpl도
	AppConfig가 생성한다. 그리고 AppConfig는 OrderServiceImpl이 아닌 OrderService 인터페이스의
	다른 구현 객체를 생성하고 실행할 수도 있다. OrderServiceImpl은 묵묵히 자신의 로직을 실행할 뿐이다.
	-> 이렇듯 프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것을 제어의 역전이라 한다.

프레임워크 vs 라이브러리
	-> 프레임워크가 내가 작성한 코드를 제어하고, 대신 실행하면 그것은 프레임워크이다.(JUnit)
	-> 반면에 내가 작성한 코드가 직접 제어의 흐름을 담당한다면 그것을 라이브러리이다.

DI(Dependency Injection) : 의존관계 주입
	-> OrderServiceImpl은 DiscountPolicy 인터페이스에 의존한다. 실제 어떤 구현 객체가 사용될지는 모른다.
	-> 의존관계는 정적인 클래스 의존 관계와 동적인 객체 의존관계로 분리해서 생각해야 한다.

	정적인 클래스 의존관계 -> 클래스 다이어그램
	 : 클래스가 사용하는 import 코드만 보고 의존관계를 쉽게 판단할 수 있다.
	  정적인 의존관계는 애플리케이션을 실행하지 않아도 분석할 수 있다.
	  OrderServiceImpl은 MemberRepository, DiscountPolicy에 의존한다는 것을 알 수 있다.
	  그런데 이러한 클래스 의존관계 만으로는 실제 어떤 객체가 OrderServiceImpl에 주입될 지 알 수 없다.

	동적인 객체 인스턴스 의존관계 -> 객체 다이어그램
	 : 애플리케이션 실행 시점에 실제 생성된 객체 인스턴스의 참조가 연결된 의존관계이다.
	  
	-> 애플리케이션 실행 시점(런타임)에 외부(AppConfig)에서 실제 구현 객체를 생성하고 클라이언트에 전달해서
	클라이언트와 서버의 실제 의존관계가 연결되는 것을 의존관계 주입이라고 한다.
	-> 객체 인스턴스를 생성하고, 그 참조값을 전달해서 연결된다.
	-> 의존관계 주입을 사용하면 클라이언트 코드를 변경하지 않고, 클라이언트가 호출하는 대상의
	타입 인스턴스를 변경할 수 있다.
	-> 의존관계 주입을 사용하면 정적인 클래스 의존관계(사용영역)를 변경하지 않고
	동적인 객체 인스턴스 의존관계를 쉽게 변경할 수 있다.

Ioc 컨테이너, DI 컨테이너
	-> AppConfig처럼 객체를 생성하고 관리하면서 의존관계를 연결해 주는 것
	-> 어셈블러, 오브젝트 팩토리 등으로 불리기도 한다.

스프링으로 전환하기
	-> AppConfig에 설정을 구성한다는 뜻의 @Configuration을 붙여준다.
	-> 각 메서드에 @Bean을 붙여준다.
		-> 스프링 컨테이너에 빈으로 등록 완료
	-> ApplicationContext를 스프링 컨테이너라 한다.
	-> 기존에는 개발자가 AppConfig를 사용해서 직접 객체를 생성하고 DI를 했지만,
	이제부터는 스프링 컨테이너를 통해서 사용한다.
	-> 스프링 컨테이너는 @Configuration이 붙은 AppConfig를 설정(구성) 정보로 사용한다.
	여기서 @Bean이라 적힌 메서드를 모두 호출해서 반환된 객체를 스프링 컨테이너에 등록한다.
	이렇게 스프링 컨테이너에 등록된 객체를 스프링 빈이라 한다.
	-> 스프링 빈은 @Bean이 붙은 메서드의 명을 스프링 빈의 이름으로 사용한다.(memberService, orderService)
	-> 이전에는 개발자가 필요한 객체를 AppConfig를 사용해서 직접 조회했지만,
	이제부터는 스프링 컨테이너를 통해서 필요한 스프링 빈(객체)를 찾아야 한다.
		-> ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
		    ac.getBean("메서드명", 클래스명.class); 
	-> 스프링 빈은 ac.getBean()메서드를 사용해서 찾을 수 있다.
	-> 기존에는 개발자가 직접 자바코드로 모든 것을 했다면 이제부터는 스프링 컨테이너에 객체를
	스프링 빈으로 등록하고, 스프링 컨테이너에서 스프링 빈을 찾아서 사용하도록 변경되었다.

스프링 부트 3.1 이상 log 안뜨는 현상

src/main/resources/logback.xml -> 이 위치에 아래 파일을 생성

<configuration>
<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
<encoder>
<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} -%kvp-
%msg%n</pattern>
</encoder>
</appender>
<root level="DEBUG">
<appender-ref ref="STDOUT" />
</root>
</configuration>

	-> root level="INFO" 로 변경하면 다시 생략된다.
















