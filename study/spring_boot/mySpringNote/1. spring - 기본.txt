스프링
 : 자바 언어 기반의 프레임워크 -> 자바 언어의 가장 큰 특징은 객체 지향 언어
	-> 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크
	-> 좋은 객체 지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크

	필수 요소 : 스프링 프레임워크, 스프링 부트
	선택 요소 : 스프링 데이터, 스프링 세션, 스프링 시큐리티, 스프링 Rest Docs, 스프링 배치, 스프링 클라우드

객체 지향 프로그래밍
 : 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 객체들의 모임으로
  파악하고자 하는것이다. 각각의 객체는 메시지를 주고받고, 데이터를 처리할 수 있다.(협력)
	-> 프로그램을 유연하고 변경이 용이하게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용된다.

다형성
 : 역할과 구현으로 세상을 구분
	- 운전자 - 자동차
	운전자		->	자동차		------> 역할
				(K3, 아반떼, 테슬라) ------> 구현
	- 공연무대
	로미오		->	줄리엣		------> 역할
	(장동건, 원빈)		(김태희, 송혜교)	------> 구현
	- 키보드, 마우스, 세상의 표준 인터페이스들
	- 정렬 알고리즘
	- 할인 정책 로직

역할과 구현을 분리
 : 역할과 구현으로 구분하면 세상이 단순해지고, 유연해지며 변경도 편리해진다.
	-> 클라이언트는 대상의 역할(인터페이스)만 알면 된다.
	-> 클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
	-> 클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다.
	-> 클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.

	- 자바 언어의 다형성 활용 (역할 - 인터페이스, 구현 - 인터페이스를 구현한 클래스, 구현 객체)
	- 객체 설계시 역할을 먼저 부여하고, 그 역할을 수행하는 구현 객체 만들기

객체의 협력이라는 관계부터 생각
	- 혼자 있는 객체는 없다.
	- 클라이언트 : 요청, 서버 : 응답
	- 수 많은 객체 클라이언트와 객체 서버는 서로 협력 관계를 가진다.
 
스프링과 객체 지향
	- 다형성이 가장 중요하다.
	- 스프링은 다형성을 극대화해서 이용할 수 있게 도와준다.
	- 제어의 역전(IoC), 의존관계 주입(DI)은 다형성을 활용해서 역할과 구현을 편리하게 다룰 수 있도록 지원한다.
	- 레고 블럭 조립하듯이, 공연 무대 배우를 선택하듯이. 구현을 편리하게 변경할 수 있다.

SOLID
 : 클린코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리
	- SRP(Single Responsibility Principle) : 단일 책임 원칙
	- OCP(Open/Closed Principle) : 개방-폐쇄 원칙
	- LSP(Liskov Substitution Principle) : 리스코프 치환 원칙
	- ISP(Interface Segregation Principle) : 인터페이스 분리 원칙
	- DIP(Dependency Inversion Principle) : 의존관계 역전 원칙

다형성 만으로는 OCP, DIP를 지킬 수 없다. -> 스프링을 통해 클라이언트 코드의 변경 없이 기능 확장



















