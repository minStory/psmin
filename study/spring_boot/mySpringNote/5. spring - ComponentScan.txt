컴포넌트 스캔과 의존관계 자동 주입
 - 지금까지 스프링 빈을 등록할 때는 자바 코드의 @Bean이나 XML의 <Bean>을 통해서 설정 정보에 직접 등록할
   스프링 빈을 나열했다.
	-> 규모가 커지면 반복이 많아지고, 문제가 발생할 수 있다.
 - 그래서 스프링은 설정 정보가 없어도 자동으로 스프링 빈을 등록하는 컴포넌트 스캔이라는 기능을 제공한다.
 - 또 의존관계도 자동으로 주입하는 @Autowired라는 기능도 제공한다.

 - AutoAppConfig.class 생성
 - 설정 정보에 @Configuration과 @ComponentScan을 붙여준다.
	-> 기존의 @Configuration이 붙은 설정 정보도 자동으로 등록되기 때문에 excludeFilters를 이용해서
	    기존에 만들어두었던 설정 정보는 제외
	-> @ComponentScan(
		excludeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Configuration.class));
 - MemoryMemberRepository에 @Component 추가
 - RateDiscountPolicy에 @component 추가
 - MemberServiceImpl에 @Component, @Autowired 추가
 - OrderServiceImpl에 @Component, @Autowired 추가
	-> AutoAppConfig에 설정 정보 자체가 없기 때문에 의존관계 주입도 이 클래스 안에서 해결해야 한다.


@ComponentScan
 - @ComponentScan은 @Component가 붙은 모든 클래스를 스프링 빈으로 등록한다.
 - 이때 스프링 빈의 기본 이름은 클래스명을 사용하되 맨 앞글자만 소문자를 사용한다.
	-> 빈 이름 기본 전략 : MemberServiceImpl 클래스 -> memberServiceImpl
	-> 빈 이름 직접 지정 : @Component("memberService2")

@Autowired
 - 생성자에 @Autowired를 지정하면, 스프링 컨테이너가 자동으로 해당 스프링 빈을 찾아서 주입한다.
 - 이때 기본 조회 전략은 타입이 같은 빈을 찾아서 주입한다.
	-> getBean(MemberRepository.class)와 동일하다고 이해하면 된다.



탐색 위치와 기본 스캔 대상
 - 모든 자바 클래스를 다 컴포넌트 스캔하면 시간이 오래 걸린다.
	-> 필요한 위치부터 탐색하도록 시작 위치를 지정할 수 있다.
@ComponentScan(
	basePackages = "hello.core"
)
 - basePackages : 탐색할 시작 위치를 지정 -> 하위 패키지 모두 탐색
	-> basePackages = {"hello.core", "hello.service"} 처럼 여러 위치 지정 가능
 - basePackageClasses : 지정한 클래스의 패키지를 탐색 시작 위치로 지정
 - 지정하지 않으면 @ComponentScan이 붙은 설정 정보 클래스의 패키지가 시작 위치가 된다.
	-> 패키지 위치를 지정하지 않고, 설정 정보 클래스의 위치를 프로젝트 최상단에 두는 것 권장



컴포넌트 스캔의 대상 추가 대상
 - @Component : 컴포넌트 스캔에서 사용
 - @Controller : 스프링 MVC 컨트롤러에서 사용
	-> 스프링 MVC 컨트롤러로 인식
 - @Service : 스프링 비즈니스 로직에서 사용
	-> 비즈니스 계층이 여기에 있겠다라고 인식하는데에 도움, 특별한 처리 없음
 - @Repository : 스프링 데이터 접근 계층에서 사용
	-> 스프링 데이터 접근 계층으로 인식하고, 데이터 계층의 예외를 스프링 예외로 변환
 - @Configuration : 스프링 설정 정보에서 사용



필터
 - includeFilters : 컴포넌트 스캔 대상을 추가로 지정
 - excludeFilters : 컴포넌트 스캔에서 제외할 대상 지정

@ComponentScan(
	includeFilters = @Filter(type = FilterType.ANNOTATION, classes = MyIncludeComponent.class),
	excludeFilters = {
		@Filter(type = FilterType.ANNOTATION, classes = MyExcludeComponent.class),
		@Filter(type = FilterType.ASSIGNABLE_TYPE, classes = BeanA.class)
	}
)

FilterType 옵션
 - ANNOTATION : 기본값, 애노테이션을 인식해서 동작한다. -> 생략가능
 - ASSIGNABLE_TYPE : 지정한 타입과 자식 타입을 인식해서 동작한다.
 - ASPECTJ : AspectJ 패턴 사용
 - REGEX : 정규 표현식
 - CUSTOM : TYpeFilter 라는 인터페이스를 구현해서 처리



중복 등록과 충돌
 - 자동 빈 등록 vs 자동 빈 등록
	-> ConflictingBeanDefinitionException 예외 발생
 - 수동 빈 등록 vs 자동 빈 등록
	-> 수동 빈 등록이 우선권을 가진다.(수동 빈이 자동 빈을 오버라이딩 해버린다)
	-> 프로퍼티스에서 spring.main.allow-bean-definition-overriding=false가 기본값
	-> true로 바꾸면 자동 오버라이딩












