---------------------------------------------------------------------------------
이론

git : 분산형 버전관리 시스템
	1) 로컬저장소(개인컴퓨터)와 원격저장소(github)로 나누어져 있다.
	2) 인터넷 연결이 없더라도 작업을 할 수 있다.
	3) 원격저장소에 있는 코드를 공유할 수 있어 효율적인 협업이 가능하다.
	4) 파일들의 수정, 삭제, 추가 등에 대한 모든 변경사항이 기록된다.
	5) 오픈소스를 보며 코드의 지식을 넓힐 수 있다.

git의 공간 분리 : 동작과 이력을 효율적으로 처리하기 위해서 저장공간을 논리적으로 분리
	1) working tree(작업 공간) : 로컬저장소에 접근하여 파일을 생성, 수정, 저장하는 공간
		tracked
			test.txt
				unmodified상태 -> stage상태
			test2.txt
				modified상태 -> unstage상태
		untracked
			test3.txt -> unstage상태
		-> 새롭게 만들어진 파일은 모두 untracked상태이므로 tracked상태로 바꿔주어야 한다.
		-> tracked상태에서 수정하면 unstage상태로 변경되기 때문에 다시 stage상태로 바꿔주어야 한다.
	2) stage(임시 저장 공간) : tracked파일들을 관리하는 영역
		-> tracked파일들의 추적 상태를 잠시 복사하여 저장한다.
		-> stage에 올라가지 않은 작업 공간에 새롭게 만들어진 untracked파일도 unstage상태라고 할 수 있다.
		-> 최종적인 파일의 변화를 영구적으로 저장하기 위해서는 모든 파일이 stage상태가 되어야한다.
	3) repository(실질적인 저장/기록 공간)

vi에디터 : 커밋메시지 입력 편집기
	-> #은 주석(해석하지 않음)
	-> 입력 방법 : i(insert모드) -> 내용 입력 -> esc -> : wq 엔터(종료)

브랜치(나뭇가지, 분기점) : 원본을 기반으로 분리하여 작업할 수 있도록 도와준다.
	-> 항상 안정된 코드를 유지함과 더불어 시험적인 작업을 시도할 수 있다.
	-> 일종의 가상 폴더
	

Head 포인터 : 각 브랜치마다 가장 마지막에 커밋된 상태를 가리키는 지시자(저장공간)
	-> 새롭게 커밋이 되거나 수정, 변경이 될 때 Head가 알고 있는 커밋을 보고 비교하면 속도가 빠르다.

충돌 : 같은 파일 내에서 같은 줄을 수정하거나 삭제하거나 변경한 후, 해당 대상을 하나로 합칠 때 충돌이 발생한다.
	-> 충돌이 발생하면 자동으로 합쳐진 내용이 커밋되지 않으며 직접 내용을 수정한 후
	     똑같이 stage에 올려주고 commit을 해줘야 한다.

배포관리 : 우리가 출시한 서비스를 사용하는 사용자로 하여금 버전 정보를 알 수 있도록 하는 것

태그
	1) Annotated 태그 : 부가적인 메시지를 작성할 수 있는 태그
	2) LightWeight 태그 : 부가적인 메시지를 작성할 수 없는 태그

------------------------------------------------------------------------
gitbash 명령어

cd 하위폴더명 : 경로 이동

cd .. : 상위폴더로 이동

git init : 현재 폴더를 레포지토리로 저장(등록)
	-> .git 숨김폴더 생성
	-> .git 삭제하면 레포지토리에서 해제

git status	: 로컬저장소 상태 확인 명령어

git add 파일명 : stage에 파일 올리기
     add *or. : stage에 모든 파일 올리기

git rm --cached 파일명 : stage에서 파일 내리기
     rm --cached *or. : stage에서 모든 파일 내리기
     rm 파일명 : 로컬저장소 파일까지 삭제

git commit : stage상태의 파일을 repository에 저장
	-> 커밋메시지 입력(권장) (vi 에디터)
	-> esc i : insert 모드 진입 -> 내용 삽입 -> esc로 insert 모드 해제
	-> : wq 엔터 --> 해당 커밋메시지 적용
     commit -m '커밋메시지' : vi에디터 열지 않고 커밋메시지 적용
     commit -a : unstage상태의 파일을 add와 commit 동시 진행
	-> tracked되어 modified된 파일에만 적용 가능 (새로 생성된 untracted파일은 적용 불가)
     commit -am '커밋메시지' ; -a옵션과 -m 옵션 동시 진행

git clone 원격저장소주소 : 원격저장소의 커밋내용, 수정사항 등 모든 과정을 복제

git fetch : 원격저장소의 내용을 가져오지만 로컬저장소에 영향을 미치지 않는다.
	-> 병합하기 전 확인하는 용도로 사용

git pull : 원격저장소의 내용을 가져오면서 로컬저장소에 변경 내용을 반영한다.
	-> git fetch + git merge

git mv 변경전파일명or경로 변경후파일명or경로 : 폴더명 or 파일명 or 파일경로 변경

git log : 커밋 내용(로그)을 확인
	-> q를 입력하여 원래대로 돌아온다
	-> 각각의 커밋 내용은 고유의 id값을 가지고 있으며 중복이 되지 않고 id로 커밋을 구분한다
     log --graph : 그래프 모양으로 커밋 보기
     log --oneline : 커밋ID와 메시지를 한 줄에 보기
     log --oneline --graph : oneline + graph
     -숫자 : 최근 해당 숫자만큼의 커밋 내용 보기

git remote add 원격저장소별칭 원격저장소주소 : git 로컬저장소와 연결된 원격저장소를 설정
	-> 원격저장소 주소가 너무 길기 때문에 origin(별칭)으로 사용(다른 별칭 사용 가능)
     remote : 해당 레포지토리와 연결된 원격저장소의 별칭을 확인
     remote -v : 해당 레포지토리와 연결된 원격저장소의 별칭과 주소 확인
     remote show 원격저장소별칭 : 원격저장소 브랜치와 로컬브랜치 정보 확인
     remote rm 원격저장소별칭 : 원격저장소의 별칭 삭제
     remote rename 기존별칭 변경할별칭 : 원격저장소의 별칭 변경

git push 원격저장소별칭 생성할원격브랜치명 : 현재 위치한 로컬브랜치를 원격저장소에 업로드
	-> remote show로 확인했을 때 git push만 연결된다
	-> 이름을 로컬브랜치와 동일하게 해야한다
     push -u 원격저장소별칭 생성할원격브랜치명 : 현재 위치한 로컬브랜치를 원격저장소에 업로드 후 기본값으로 설정
	-> remote show로 확인했을 때 git push, git pull 모두 연결된다
     push 원격저장소별칭 -d 원격브랜치명 : 원격저장소 브랜치 삭제
     push 원격저장소별칭 로컬저장소별칭:원격저장소별칭 : 연결된 브랜치 외에 다른 브랜치로 업데이트해야할 때 사용
     push -f 원격저장소별칭 원격브랜치명 : (-force) 로컬저장소의 내용을 원격저장소에 강제로 업로드
	-> 개인적으로 작업할 때만 사용
     push 원격저장소별칭 태그명 : 원격저장소로 태그 정보 전송
     push 원격저장소별칭 --tags : 원격저장소로 모든 태그 정보 전송
     push -d 원격저장소별칭 태그명 : 원격저장소에서 해당 태그 삭제

git branch 브랜치명 : 로컬브랜치 생성
	-> - . 으로 시작 불가, 띄어쓰기 및 특수문자 불가, 이미 존재하는 브랜치명 불가
	-> git-flow 기법 참고!!
     branch 브랜치이름 원격저장소별칭/브랜치명 : 로컬브랜치 생성 후 원격저장소 브랜치와 연결
	-> 원격저장소 브랜치는 생성되어 있어야한다.
     branch -m 변경할브랜치명 : 현재 위치한 브랜치의 브랜치명 변경
     branch -d 브랜치명 : 로컬브랜치 삭제
	-> 현재 위치한 브랜치는 삭제 불가(다른 브랜치로 전환 후 삭제해야 한다)
     branch : 브랜치 항목 보기, 브랜치 이름만 보이며 *표시가 있는 위치가 현재 내가 위치한 브랜치
     branch -v : (-verbose) 브랜치명, 기준커밋, 커밋메시지 표시
     branch -r : (-remote) 원격저장소 브랜치 확인
     branch -a : (-all) 원격저장소 및 로컬저장소 브랜치 확인
     branch -vv : 연결된 브랜치 정보 확인

git checkout 이동할브랜치명 : 해당 브랜치로 이동하며, commit이 완료되지 않으면(stage에 존재) 다른 브랜치로 이동 불가
	-> - 를 입력하면 이전브랜치로 이동
     checkout -b 브랜치명 : 브랜치 생성과 동시에 이동

git merge 브랜치명 : 현재 위치한 브랜치를 중심으로 해당 브랜치와 병합을 진행
	-> fast-forwart 기법 : main브랜치에는 수정 사항이 없고, 다른 브랜치에 수정사항이 있을 때,
			이를 main브랜치로 합치는 행위
	-> 3-way 기법 : 여러 브랜치에서 동시에 수정이 발생하고 그 결과물을 하나로 합치는 행위
     merge 브랜치명 -m '커밋메시지' : vi에디터를 열지 않고 커밋메시지 적용
     merge --abort : 충돌 발생 시 merge를 취소하고 싶을 때 사용
	-> merge를 계속 진행하고 싶을 때는 충돌 내용을 수정한 후 add하여 commit해주면 완료된다.
     merge 원격저장소별칭/원격브랜치명 : git fetch 후 로컬저장소에 내용을 반영한다.

git rebase base브랜치명 : base를 재설정
	-> base : 브랜치가 뻗어나가기 시작하는 커밋
	-> 뿌리를 바꿔주고 싶은 브랜치에서 사용
	-> rebase 완료 후 merge하여 합쳐주는 것도 가능
     rebase --abort : 충돌 발생 시 rebase를 취소하고 싶을 때 사용
     rebase --continue : 충돌 발생 시 rebase를 계속 진행하고 싶을 때 사용
	-> 충돌 내용을 수정한 후 add하여 stage에 올려주고 사용한다.

git reset --soft 커밋ID : 해당 커밋 상태로 돌아가되 수정사항이 working treee와 stage에 남아있는 상태
     reset --mixed 커밋ID : 해당 커밋 상태로 돌아가되 수정사항이 working tree엔 없고 stage에는 남아있는 상태
     reset --hard 커밋ID : 해당 커밋 상태로 돌아가며 수정사항 자체가 남아있지 않은 상태
	-> 옵션 생략 시 자동으로 --mixed 적용
	-> 커밋ID 자리에는 HEAD를 기준으로 상대적인 이동 가능
		git reset HEAD~ : HEAD 뒤로 한 칸
		git reset HEAD~2 : HEAD 뒤로 두 칸
		git reset HEAD^ : HEAD 뒤로 한 칸
		git reset HEAD^2 : HEAD 뒤로 두 칸
	-> 개인적으로는 사용하나 실무에서는 거의 사용하지 않는다!
     reset --hard 원격저장소별칭/원격브랜치명 : 원격저장소의 내용을 로컬저장소에 강제로 반영한다.
	-> git fetch -all로 로컬저장소에 미리 반영 후 사용한다.

git revert 되돌릴커밋ID : 새로운 커밋을 만들면서 이전의 상태로 되돌아간다.
	-> 되돌릴 대상을 입력해야 한다.(한칸 이전으로 돌아가고 싶으면 현재 커밋ID를 입력)
	-> revert는 반드시 가장 최근 커밋부터 한 번에 한 개의 커밋을 취소하는 습관을 길러야한다. (충돌 문제)
     revert 초기커밋ID..마지막커밋ID : revert 범위 연산자
	-> revert 범위가 넓을 때는 범위 연산자 사용
	-> 마지막커밋부터 한개씩 커밋하여 초기커밋 상태로 되돌아간다.
	-> reset과 동일하게 커밋ID 대신 HEAD 연산자도 사용 가능
	-> 단일 revert는 입력한 커밋ID의 이전 상태로 되돌아 가지만 범위 연산자는 입력한 초기커밋ID 상태로 되돌아간다.

git tag 태그이름 커밋ID : LightWeight 태그 생성
     tag -a 태그이름 커밋ID : Annotated 태그 생성
     tag -a 태그이름 커밋ID -m '태그메시지' : vi에디터 없이 태그메시지 작성
	-> 커밋ID가 생략되면 HEAD가 기준
	-> 커밋ID 대신 HEAD 연산자 사용 가능
     tag -d 태그명 : 태그 삭제

git show 태그명 : 태그 상세 정보 확인

git checkout 태그명 : HEAD를 해당 태그로 이동
	-> 브랜치와 유사하게 사용 가능

git switch - : checkout 후 이전 상태로 복귀












