-- 12월 20일
-- Mysql에서 가장 자주 사용하는 문자열 함수 정리
-- 실무에서 DB 내장함수는 잘 안쓴다. -> 프로그래밍단에서 사용

-- 1. substring
-- substring 특정 범위 문자 자르기
select substring(ename, 1, 3) from emp;
-- 입사날짜 년-월 출력
select substring_index(hiredate, "-", 2) from emp;
-- left 왼쪽으로 3번째 까지만 문자 추출
select left(ename, 3) from emp;
-- right 오른쪽으로 3번째 까지만 문자 추출
select right(ename, 3) from emp;
-- 소문자 -> 대문자 자동 변환
select upper(ename) from emp;
-- 대문자 -> 소문자 자동 변환
select lower(ename) from emp;
-- 문자열 길이 반환
select length(ename) from emp;
-- 문자열 길이 반환
select length("홍길동");
-- 한글 문자열 길이 반환
select char_length("홍길동");

-- datediff, 날짜와 날짜 사이 일 수 구하기
select datediff("2023-12-25", "2023-12-20");


-- DML(select, insert, delete, update)
-- DDL(create, alter, drop)

-- 데이터 타입(자주 사용하는)
-- 1. integer(정수)
-- 2. bigint(== long)
-- 3. bool(boolean)
-- 4. decimal
-- 5. date, timestamp
-- 6. varchar(== string)
-- 7. blob(엄청 많은 문자열 저장할 때)
--  ex) 게시판 글 내용 저장할 때

-- 테이블 생성
create table student(
	student_id int comment "학생번호",
	name varchar(20) comment "이름",
	addr varchar(50) comment "주소",
	age int comment "나이",
	create_at timestamp default current_timestamp comment "생성날짜"
)
-- varchar(20) : 20 길이 제한
-- default(기본값) : insert할 때 해당 컬럼 값을 입력하지 않아도 자동으로 값 세팅

insert into student(student_id, name, addr, age) 
values(100, "홍길동", "서울 강남구", 20)
commit;
-- ***** ccommit
-- insert, delete, update 다음엔 commit 명령어를 실행해야 한다.
-- commit은 최종 저장을 의미한다.
-- 디비버 같은 데이터베이스 연동 프로그램은 자동으로 commit 명령어를 날려준다.

-- 테이블 삭제
drop table student;

-- 테이블 생성(여러가지 옵션 추가)
-- primary key : 고유한 값을 가진 컬럼에 지정 해준다.(중복 방지)
-- -> not null과 index 기능도 가지고 있다.
create table student(
	student_id int primary key comment "학생번호",
	name varchar(20) not null comment "이름",
	addr varchar(50) not null default "일본 도쿄" comment "주소",
	age int default 20 comment "나이",
	create_at timestamp default current_timestamp comment "생성날짜"
);

insert into student(student_id, name, addr) values(1, "홍길동", "서울 강남구");

drop table student;


create table student(
	student_id int auto_increment primary key comment "학생번호",
	name varchar(20) not null comment "이름",
	addr varchar(50) not null default "일본 도쿄" comment "주소",
	age int default 20 comment "나이",
	create_at timestamp default current_timestamp comment "생성날짜"
);
-- auto_increment : 증감 연산자
insert into student(name, addr) values("홍길동", "서울 강남구")

-- 문제
-- 테이블 이름 movie
-- 컬럼 이름 movie_id(int), movie_name(varchar), genre(varchar), movie_time(timestamp)
-- movie_id는 고유한 값이고 movie_name과 genre는 null이 올 수 없다.
-- movie_time의 기본값은 현재시각이다.
-- 3개의 데이터 insert

create table movie(
	movie_id int auto_increment primary key comment "영화번호",
	movie_name varchar(20) not null comment "영화이름",
	genre varchar(20) not null comment "장르",
	movie_time timestamp default current_timestamp comment "개봉날짜"
);

insert into movie(movie_name, genre) values("영화1", "느와르");
insert into movie(movie_name, genre) values("영화2", "코미디");
insert into movie(movie_name, genre) values("영화3", "공포");
insert into movie(movie_name, genre, movie_time) values("영화4", "재난", now());
insert into movie(movie_name, genre, movie_time) values("영화5", "전쟁", "2023-12-01 11:11:11");

drop table movie;

-- 선수 테이블
-- foriegn key : 교집합 할 수 있는 컬럼에 외래키 설정
-- -> 참조키는 null이 올 수 있고, index 기능 없음
-- primary key(pk)는 null이 올 수 없고, fk(참조키)는 null이 올 수 있다.
create table player(
	player_id int auto_increment primary key comment "선수번호",
	name varchar(20) not null comment "선수이름",
	team_id int comment "팀번호",
	foreign key (team_id) references team(team_id)
);
-- 팀 테이블

create table team(
	team_id int auto_increment primary key comment "팀번호",
	team_name varchar(50) not null comment "팀이름"	
);
-- 팀 데이터 추가하기
insert into team(team_name) values("한화이글스");
insert into team(team_name) values("두산베어스");
insert into team(team_name) values("롯데자이언츠");
-- 선수 데이터 추가하기
insert into player(name, team_id) values("문동주", 1);
insert into player(name, team_id) values("오재원", 2);
insert into player(name, team_id) values("이대호", 3);
insert into player(name, team_id) values("류현진", 3);

-- 문제) 문동주 선수의 팀이름을 조회하는 sql문을 작성하시오.
select
	p.name,
	t.team_name
from team as t
inner join player as p
on t.team_id = p.team_id
where p.name = "문동주"

-- player와 team의 관계를 ****N:1 관계라고 정의하며, 매우 중요하다.
-- JPA같은 기술을 다룰 때
-- 1:N(one to many)
-- ex)선수-팀, 사원-부서, 유저-서버
-- 1:1(one to one)
-- ex)결혼, 군인-총
-- ****M:N(many to many)
-- ex)학생-수강
-- M:N은 3개 이상의 테이블이 생긴다.



