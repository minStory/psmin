-- 12월 22일
-- 자주 사용하는 문자열 함수
-- concat: 문자를 합쳐주는 함수
select concat(ename,"님") from emp

-- 테이블 생성
-- select, delete, update, insert (DML)
-- create, drop, alter (DDL)
-- create: 테이블 생성, drop: 테이블 삭제, alter: 테이블 수정
-- commit (TCL)
-- DML(insert, delete, update) 다음엔 commit
-- 1. insert into emp(empno, ename) values (9000, "홍길동")
-- 2. commit(최종 저장), commit을 입력하지 않으면 insert 반영 안됨
-- 디비버 같은 프로그램(SQL 편집기)은 자동으로 auto commit이 설정되어 있음
-- 회사나 학교에서 실수를 방지하고 싶으면 autocommit을 해제해야 함

-- DDL (create, alter, drop)은 commit을 하지 않아도 됨
-- DDL은 commit의 영향을 받지 않는다.

-- 테이블 생성
create table x(
	empno int comment "사원번호",
	ename varchar(30) comment "사원이름"
)

create table y(
	deptno int auto_increment primary key comment "부서번호",
	dname varchar(50) comment "부서이름"
)

insert into y(deptno, dname) values(1, "영업부서");
insert into y(dname) values("기술지원팀");
-- primary key(PK)로 설정된 deptno 컬럼은 값이 중복될 수 없다.

drop table x,y;

-- 참조키를 넣어서 테이블 생성해보기
-- 참조키 혹은 외래키(FK)는 테이블간의 관계를 맺어준다.
create table y(
	deptno int auto_increment primary key comment "부서번호",
	dname varchar(20) comment "부서이름"
)

create table x(
	empno int primary key comment "사원번호",
	ename varchar(30) comment "사원이름",
	deptno int comment "부서번호",
	foreign key(deptno) references y(deptno)
)

insert into y(deptno, dname) values(1, "영업부서");
insert into y(deptno, dname) values(2, "기술지원팀");

insert into x(empno, ename) values(100, "홍길동");
insert into x(empno, ename) values(200, "박길동");

-- x테이블의 deptno가 null이 들어가 있음
-- 즉, FK는 null이 허용된다. pk는 null을 허용하지 않는다.

-- 문제) 사원번호가 100인 사원의 부서번호를 1번, 200번인 사원에 부서번호를 2번으로 수정하시오
update x set deptno = 1 where empno = 100;
update x set deptno = 2 where empno = 200;

insert into y(deptno, dname) values(3, "SALES");

delete from x where ename = "김길동"

delete from y where deptno = 1;
delete from y where deptno = 2;

delete from y where deptno = 3;
-- on delete 설정 때문에 1번과 2번은 삭제될 수 없다.
-- FK가 설정되는 순간 데이터 삭제는 까다롭다.
-- x테이블에 있는 deptno가 1,2번
-- 1번 2번 deptno는 현재 사용중이기 때문에 삭제할 수 없음

-- 200번 사원 부서번호 2번에서 1번으로 수정
update x set deptno = 1 where empno = 1;

delete from y where deptno = 2;
-- x테이블에서 2번 부서를 사용하는 사원이 없으므로 2번 부서 삭제 가능
-- FK(참조키)는 테이블 간 데이터를 엄격하게 다룬다. 이는 관계형 데이터베이스를 사용하는 이유 중 하나다.
-- MYSQL(관계형 데이터베이스 중 하나인 제품)
 
-- 사용중이여도 삭제를 할 수 있게 설정하기


drop table x,y;

create table y(
	deptno int auto_increment primary key comment "부서번호",
	dname varchar(20) comment "부서이름"
)

create table x(
	empno int primary key comment "사원번호",
	ename varchar(30) comment "사원이름",
	deptno int comment "부서번호",
	foreign key(deptno) references y(deptno) on delete cascade
)

insert into y(dname) values("영업부");

insert into x(empno, ename, deptno) values(1, "홍길동", 1); 

delete from y where deptno = 1;

-- 면접 단골 on delete cascade
-- 부모테이블은 dept 자식테이블은 emp 구조를 가지게 됨
-- on delete: 부모 테이블에서 삭제 이벤트가 발생하면 자식 테이블 데이터에 이벤트 발생
-- on update: 부모 테이블에서 수정 이벤트가 발생하면 자식 테이블 데이터에 이벤트 발생

-- 이벤트 종류
-- 1. cascade: 자식 테이블 데이터 삭제 or 수정
-- 2. set null: 자식 테이블 데이터 null 업데이트
-- 3. set default: 자식 테이블 데이터 default 값으로 변경
-- 4. restrict(default): 자식 테이블에서 데이터 사용중일 때 삭제 or 수정 불가능(기본값)
-- 5. no action: 자식 테이블 데이터는 변경되지 않는다.

-- 4번 부서 추가
insert into y(deptno, dname) values(4, "dev");
-- 사원 추가
insert into x(empno, ename, deptno) values(400, "KING", 4);
delete from y where deptno = 4;
-- on delete cascade로 설정되어 있기 때문에 4번부서를 가진 사원도 삭제됨

-- 1:N, M;N, 1:1
-- emp테이블과 dept테이블 관계 -> 1:N관계
-- 여러명의 사원이 한 개의 부서에 소속될 수 있기 때문

-- 문제) 주제는 영화 1:N관계를 가지는 테이블 2개를 만들어 보세요
create table movie(
	movieno int auto_increment primary key comment "영화번호",
	moviename varchar(30) comment "영화이름"
)

create table movie_info(
	movieno int comment "영화번호",
	movietime int comment "상영시간",
	foreign key(movieno) references movie(movieno) on delete cascade
)

insert into movie(moviename) values("서울의봄");
insert into movie(moviename) values("아쿠아맨");

insert into movie_info(movieno, movietime) values(1, 180);

drop table movie,movie_info;

create table movie(
	movie_id int primary key comment "영화 고유아이디",
	movie_name varchar(100) comment "영화 이름",
	genre varchar(50) comment "영화 장르",
	create_at timestamp default current_timestamp comment "개봉날짜"
);

create table actor(
	actor_id int primary key comment "배우 고유아이디",
	actor_name varchar(50) comment  "배우 이름",
	movie_id int comment "영화 고유아이디",
	foreign key(movie_id) references movie(movie_id) on delete no action
);

insert into movie(movie_id, movie_name, genre) values(1, "Avengers", "action");
insert into actor(actor_id, actor_name, movie_id) values(1, "Chris Evans", 1);
insert into actor(actor_id, actor_name, movie_id) values(2, "Robert Downey", 1);
insert into actor(actor_id, actor_name, movie_id) values(3, "Mark Ruffalo", 1);
insert into actor(actor_id, actor_name, movie_id) values(4, "Scarlett Johansson", 1);

select
	a.actor_name,
	a.actor_id
from movie as m
inner join actor as a
on m.movie_id = a.movie_id
where m.movie_name = "Avengers";

-- alter 테이블 수정
alter table movie add column actor_id int comment "배우 아이디";

insert into movie(movie_id, movie_name, genre, actor_id) values(2, "Avengers-endgame", "action", 3);
delete from movie where movie_id = 2;

-- movie_id <- PK
-- N(배우) : 1(영화) 관계


-- movie_id가 아닌 actor_id로 조인하기
-- join은 데이터타입만 같으면 가능하다.
-- 테이블 생성할 때 foreign key를 설정하지 않아도 조인은 가능하다.
-- foreign key
-- 장점 -> 테이블 관계를 파악하기가 쉽다.
-- 단점 -> 데이터를 삭제&수정 하는데 제약사항이 있다. on delete 같은 걸 설정해야함

-- foreign key없이 join(데이터타입만 같다면 join이 됨) <- 대형 프로젝트에서 종종 이런식으로 운영한다.
-- 장점) 데이터를 쉽게 삭제&수정 할 수 있다.
-- 단점) 테이블 관꼐를 파악하기 어렵다.
select
	m.movie_name,
	a.actor_name,
	date_format(m.create_at, "%Y-%m-%s")
from movie as m
inner join actor as a
on m.actor_id = a.actor_id;










