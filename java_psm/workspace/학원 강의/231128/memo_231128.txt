@컬렉션 프레임워크
프로그램 실행 시 메모리에 자료를 유지하고 관리하며 배열의 제약의
단점을 보완할 수 있습니다.

자료구조(stack/queue/tree) - 미리 구현할 수 있는 인터페이스 모임이다.

@List
배열과 비슷한 자료구조로 중복이 허용되며 저장 순서가 유지되는 구조이다.
인덱스를 사용해서 데이터를 저장하고 찾을 수는 있지만
배열과 다르게 크기의 제한이 없는 저장 구조이다.

 - ArrayList
JDK 1.2부터 제공된 ArrayList 내부적으로 배열을 이용할 수 있고
호환성이 좋은 자료구조이다.
인덱스의 위치에 저장공간을 자유롭게 이동하고 저장/삭제 할 수 있다.
List<데이터타입> list = new ArrayList<데이터타입>();

 - LinkedList
데이터의 주소를 가지는 노드 객체가 연결되어 데이터를 저장하는 구조이다.
LinkedList는 node라는 객체를 생성해서 인접 데이터를 링크하는
형태로 체인처럼 관리한다.
추가/삭제 시 성능이 좋아진다.

@Set
순서를 유지하지 않고, 데이터의 중복을 허용하지 않는다.
인덱스를 부여하지 않기 때문에 데이터가 입력된 순서로 출력된다는
보장이 없다.

 - HashSet
동일한 값 또는 객체를 허용하지 않고 HashCode값으로
두 객체를 비교할 수 있다.
Set<E> = new HashSet<E>();

 - LinkedHashSet

@Map

 - HashMap<K,V>
List/Set 컬렉션과 다르게 map 인터페이스가 별도로 존재하며
데이터를 List계열의 컬렉션과 다르게 처리한다.
중복 key-허용X / value-허용
Hash와 속성이 같지만 map.Entry 구조를 저장하고 해당 객체는
key와 value를 저장한다.
검색을 요구하는 데이터는 효과적이지만
데이터를 저장하고 삭제할 때는 느린편이다.

Map<key, value> map = new HashMap<key, value>();

@상속, 객체배열, 스트림

1. 자바 프로젝트(SBS_Labs)를 생성한다.
2. Student 클래스와 GIS 클래스를 생성하고
  멤버변수와 멤버함수를 생성한다.
3. 프로그램 진입점인 main함수에서 BufferedReader 이용해서
  2학년.csv 파일을 불러온다.
4. 파일을 전체적으로 읽어 데이터 개수가 몇 개인지 파악한다.
5. GIS배열([])의 객체를 학생 수 만큼 생성한다.
6. 파일을 다시 읽어 GIS 배열([])객체 요소에
  학과, 학년, 학번, 성명, 거주지역, 이메일을 할당한다.(Scanner로 자동 읽기)
7. 스트림을 닫는다.
8. GIS 배열([])의 객체에 들어있는 값은 for-each 문장과
  display 멤버함수를 이용해서 출력한다.













